my-app/src/components/Transcribe//SavedTranscriptions.js:import React, { useState, useEffect } from "react";
my-app/src/components/Transcribe//SavedTranscriptions.js:import ReactMarkdown from "react-markdown";
my-app/src/components/Transcribe//SavedTranscriptions.js:import "./savedtranscriptions.css"; // Your custom styles
my-app/src/components/Transcribe//SavedTranscriptions.js:import {
my-app/src/components/Transcribe//SavedTranscriptions.js:  collection,
my-app/src/components/Transcribe//SavedTranscriptions.js:  getDocs,
my-app/src/components/Transcribe//SavedTranscriptions.js:} from "firebase/firestore";
my-app/src/components/Transcribe//SavedTranscriptions.js:import { db, auth } from "../../firebase/firebase";
my-app/src/components/Transcribe//SavedTranscriptions.js:import { useNavigate } from "react-router-dom";
my-app/src/components/Transcribe//SavedTranscriptions.js:import { saveToFirestore,removeFromFirestore } from '../../firebase/firebase';
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:const SavedTranscriptions = () => {
my-app/src/components/Transcribe//SavedTranscriptions.js:  const [savedTranscriptions, setSavedTranscriptions] = useState([]);
my-app/src/components/Transcribe//SavedTranscriptions.js:  const [activeTranscription, setActiveTranscription] = useState(null);
my-app/src/components/Transcribe//SavedTranscriptions.js:  const [isEditing, setIsEditing] = useState(false);
my-app/src/components/Transcribe//SavedTranscriptions.js:  const [editText, setEditText] = useState("");
my-app/src/components/Transcribe//SavedTranscriptions.js:  const navigate = useNavigate();
my-app/src/components/Transcribe//SavedTranscriptions.js:  const [editTitle, setEditTitle] = useState("");
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:  useEffect(() => {
my-app/src/components/Transcribe//SavedTranscriptions.js:    const fetchData = async () => {
my-app/src/components/Transcribe//SavedTranscriptions.js:      const user = auth.currentUser;
my-app/src/components/Transcribe//SavedTranscriptions.js:      if (user) {
my-app/src/components/Transcribe//SavedTranscriptions.js:        const collectionPath = `users/${user.uid}/transcriptions`;
my-app/src/components/Transcribe//SavedTranscriptions.js:        const collectionRef = collection(db, collectionPath);
my-app/src/components/Transcribe//SavedTranscriptions.js:        const querySnapshot = await getDocs(collectionRef);
my-app/src/components/Transcribe//SavedTranscriptions.js:        const savedData = querySnapshot.docs
my-app/src/components/Transcribe//SavedTranscriptions.js:          .map((doc) => ({ id: doc.id, ...doc.data() }))
my-app/src/components/Transcribe//SavedTranscriptions.js:          .sort((a, b) => b.id - a.id);
my-app/src/components/Transcribe//SavedTranscriptions.js:        setSavedTranscriptions(savedData);
my-app/src/components/Transcribe//SavedTranscriptions.js:      }
my-app/src/components/Transcribe//SavedTranscriptions.js:    };
my-app/src/components/Transcribe//SavedTranscriptions.js:    fetchData();
my-app/src/components/Transcribe//SavedTranscriptions.js:  }, []);
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:  const handleTranscriptionClick = (transcription) => {
my-app/src/components/Transcribe//SavedTranscriptions.js:    setActiveTranscription(transcription);
my-app/src/components/Transcribe//SavedTranscriptions.js:    setEditText(transcription.text);
my-app/src/components/Transcribe//SavedTranscriptions.js:    setEditTitle(transcription.title); // Set the title for editing
my-app/src/components/Transcribe//SavedTranscriptions.js:  };
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:  const handleEdit = () => {
my-app/src/components/Transcribe//SavedTranscriptions.js:    setIsEditing(true);
my-app/src/components/Transcribe//SavedTranscriptions.js:  };
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:  const handleSave = async () => {
my-app/src/components/Transcribe//SavedTranscriptions.js:    if (activeTranscription && auth.currentUser) {
my-app/src/components/Transcribe//SavedTranscriptions.js:      const docPath = `users/${auth.currentUser.uid}/transcriptions/${activeTranscription.title}`;
my-app/src/components/Transcribe//SavedTranscriptions.js:      await saveToFirestore(docPath, {
my-app/src/components/Transcribe//SavedTranscriptions.js:        ...activeTranscription,
my-app/src/components/Transcribe//SavedTranscriptions.js:        title: editTitle,
my-app/src/components/Transcribe//SavedTranscriptions.js:        text: editText,
my-app/src/components/Transcribe//SavedTranscriptions.js:      });
my-app/src/components/Transcribe//SavedTranscriptions.js:      setSavedTranscriptions((prev) =>
my-app/src/components/Transcribe//SavedTranscriptions.js:        prev.map((t) =>
my-app/src/components/Transcribe//SavedTranscriptions.js:          t.id === activeTranscription.title
my-app/src/components/Transcribe//SavedTranscriptions.js:            ? { ...t, title: editTitle, text: editText }
my-app/src/components/Transcribe//SavedTranscriptions.js:            : t
my-app/src/components/Transcribe//SavedTranscriptions.js:        )
my-app/src/components/Transcribe//SavedTranscriptions.js:      );
my-app/src/components/Transcribe//SavedTranscriptions.js:      setIsEditing(false);
my-app/src/components/Transcribe//SavedTranscriptions.js:    }
my-app/src/components/Transcribe//SavedTranscriptions.js:  };
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:  const handleDelete = async () => {
my-app/src/components/Transcribe//SavedTranscriptions.js:    if (activeTranscription && auth.currentUser) {
my-app/src/components/Transcribe//SavedTranscriptions.js:      const docPath = `users/${auth.currentUser.uid}/transcriptions/${activeTranscription.title}`;
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:      try {
my-app/src/components/Transcribe//SavedTranscriptions.js:        await removeFromFirestore(docPath);
my-app/src/components/Transcribe//SavedTranscriptions.js:        setSavedTranscriptions((prev) =>
my-app/src/components/Transcribe//SavedTranscriptions.js:          prev.filter((t) => t.title !== activeTranscription.title)
my-app/src/components/Transcribe//SavedTranscriptions.js:        );
my-app/src/components/Transcribe//SavedTranscriptions.js:        setActiveTranscription(null);
my-app/src/components/Transcribe//SavedTranscriptions.js:      } catch (error) {
my-app/src/components/Transcribe//SavedTranscriptions.js:        console.error("Error deleting data from Firestore:", error);
my-app/src/components/Transcribe//SavedTranscriptions.js:      }
my-app/src/components/Transcribe//SavedTranscriptions.js:    }
my-app/src/components/Transcribe//SavedTranscriptions.js:  };
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:    <div className="deck-container">
my-app/src/components/Transcribe//SavedTranscriptions.js:      <div className="st-squircle-banner">Convert images and audio to text</div>
my-app/src/components/Transcribe//SavedTranscriptions.js:      <button className="st-back-button" onClick={() => navigate("/")}>
my-app/src/components/Transcribe//SavedTranscriptions.js:        <i className="fas fa-arrow-left"></i>
my-app/src/components/Transcribe//SavedTranscriptions.js:      </button>
my-app/src/components/Transcribe//SavedTranscriptions.js:      <ul className="deck-list">
my-app/src/components/Transcribe//SavedTranscriptions.js:        {savedTranscriptions.map((transcription) => (
my-app/src/components/Transcribe//SavedTranscriptions.js:          <li key={transcription.id} className="deck">
my-app/src/components/Transcribe//SavedTranscriptions.js:            <div
my-app/src/components/Transcribe//SavedTranscriptions.js:              className="st-transcription-container"
my-app/src/components/Transcribe//SavedTranscriptions.js:              onClick={() => handleTranscriptionClick(transcription)}
my-app/src/components/Transcribe//SavedTranscriptions.js:            >
my-app/src/components/Transcribe//SavedTranscriptions.js:              <h2 className="st-active-transcription-header">
my-app/src/components/Transcribe//SavedTranscriptions.js:                {transcription.title}
my-app/src/components/Transcribe//SavedTranscriptions.js:              </h2>
my-app/src/components/Transcribe//SavedTranscriptions.js:              <div className="transcription-content">
my-app/src/components/Transcribe//SavedTranscriptions.js:                <div className="transcription-text-box">
my-app/src/components/Transcribe//SavedTranscriptions.js:                  <ReactMarkdown className="st-markdown-content">
my-app/src/components/Transcribe//SavedTranscriptions.js:                    {transcription.text?.length > 300
my-app/src/components/Transcribe//SavedTranscriptions.js:                      ? transcription.text.substring(0, 300) + "..."
my-app/src/components/Transcribe//SavedTranscriptions.js:                      : transcription.text || "No content available"}
my-app/src/components/Transcribe//SavedTranscriptions.js:                  </ReactMarkdown>
my-app/src/components/Transcribe//SavedTranscriptions.js:                </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:                <div className="transcription-image-box">
my-app/src/components/Transcribe//SavedTranscriptions.js:                  <img
my-app/src/components/Transcribe//SavedTranscriptions.js:                    src={transcription.imageUrl}
my-app/src/components/Transcribe//SavedTranscriptions.js:                    alt="Transcription Image"
my-app/src/components/Transcribe//SavedTranscriptions.js:                    style={{ width: "100%", height: "100%" }}
my-app/src/components/Transcribe//SavedTranscriptions.js:                  />
my-app/src/components/Transcribe//SavedTranscriptions.js:                </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:              </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:            </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:          </li>
my-app/src/components/Transcribe//SavedTranscriptions.js:        ))}
my-app/src/components/Transcribe//SavedTranscriptions.js:        <li className="deck">
my-app/src/components/Transcribe//SavedTranscriptions.js:          <div
my-app/src/components/Transcribe//SavedTranscriptions.js:            className="deck st-add-card"
my-app/src/components/Transcribe//SavedTranscriptions.js:            onClick={() => navigate("/transcribe")}
my-app/src/components/Transcribe//SavedTranscriptions.js:          >
my-app/src/components/Transcribe//SavedTranscriptions.js:            <span className="st-plus-icon">+</span>
my-app/src/components/Transcribe//SavedTranscriptions.js:          </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:        </li>
my-app/src/components/Transcribe//SavedTranscriptions.js:      </ul>
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:      {activeTranscription && (
my-app/src/components/Transcribe//SavedTranscriptions.js:        <div
my-app/src/components/Transcribe//SavedTranscriptions.js:          className="sn-note-modal"
my-app/src/components/Transcribe//SavedTranscriptions.js:          onClick={(e) => {
my-app/src/components/Transcribe//SavedTranscriptions.js:            if (e.target === e.currentTarget) {
my-app/src/components/Transcribe//SavedTranscriptions.js:              setActiveTranscription(null);
my-app/src/components/Transcribe//SavedTranscriptions.js:            }
my-app/src/components/Transcribe//SavedTranscriptions.js:          }}
my-app/src/components/Transcribe//SavedTranscriptions.js:        >
my-app/src/components/Transcribe//SavedTranscriptions.js:          <div className="sn-modal-content">
my-app/src/components/Transcribe//SavedTranscriptions.js:            {isEditing ? (
my-app/src/components/Transcribe//SavedTranscriptions.js:              <div style={{ position: "relative" }}>
my-app/src/components/Transcribe//SavedTranscriptions.js:                <h2
my-app/src/components/Transcribe//SavedTranscriptions.js:                  className="sn-active-note-header"
my-app/src/components/Transcribe//SavedTranscriptions.js:                  style={{ visibility: "hidden" }}
my-app/src/components/Transcribe//SavedTranscriptions.js:                >
my-app/src/components/Transcribe//SavedTranscriptions.js:                  {activeTranscription.title}
my-app/src/components/Transcribe//SavedTranscriptions.js:                </h2>
my-app/src/components/Transcribe//SavedTranscriptions.js:                <input
my-app/src/components/Transcribe//SavedTranscriptions.js:                  type="text"
my-app/src/components/Transcribe//SavedTranscriptions.js:                  className="sn-title-input"
my-app/src/components/Transcribe//SavedTranscriptions.js:                  value={editTitle}
my-app/src/components/Transcribe//SavedTranscriptions.js:                  onChange={(e) => setEditTitle(e.target.value)}
my-app/src/components/Transcribe//SavedTranscriptions.js:                  style={{
my-app/src/components/Transcribe//SavedTranscriptions.js:                    position: "absolute",
my-app/src/components/Transcribe//SavedTranscriptions.js:                    top: 0,
my-app/src/components/Transcribe//SavedTranscriptions.js:                    left: "50%",
my-app/src/components/Transcribe//SavedTranscriptions.js:                    transform: "translateX(-50%)",
my-app/src/components/Transcribe//SavedTranscriptions.js:                  }}
my-app/src/components/Transcribe//SavedTranscriptions.js:                />
my-app/src/components/Transcribe//SavedTranscriptions.js:              </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:            ) : (
my-app/src/components/Transcribe//SavedTranscriptions.js:              <h2 className="sn-active-note-header">
my-app/src/components/Transcribe//SavedTranscriptions.js:                {activeTranscription.title}
my-app/src/components/Transcribe//SavedTranscriptions.js:              </h2>
my-app/src/components/Transcribe//SavedTranscriptions.js:            )}
my-app/src/components/Transcribe//SavedTranscriptions.js:            {isEditing ? (
my-app/src/components/Transcribe//SavedTranscriptions.js:              <textarea
my-app/src/components/Transcribe//SavedTranscriptions.js:                className="sn-textarea"
my-app/src/components/Transcribe//SavedTranscriptions.js:                value={editText}
my-app/src/components/Transcribe//SavedTranscriptions.js:                rows="20"
my-app/src/components/Transcribe//SavedTranscriptions.js:                onChange={(e) => setEditText(e.target.value)}
my-app/src/components/Transcribe//SavedTranscriptions.js:              />
my-app/src/components/Transcribe//SavedTranscriptions.js:            ) : (
my-app/src/components/Transcribe//SavedTranscriptions.js:              <ReactMarkdown className="st-markdown-content">
my-app/src/components/Transcribe//SavedTranscriptions.js:                {activeTranscription.text || "No content available"}
my-app/src/components/Transcribe//SavedTranscriptions.js:              </ReactMarkdown>
my-app/src/components/Transcribe//SavedTranscriptions.js:            )}
my-app/src/components/Transcribe//SavedTranscriptions.js:            <div className="sn-button-group">
my-app/src/components/Transcribe//SavedTranscriptions.js:              {isEditing ? (
my-app/src/components/Transcribe//SavedTranscriptions.js:                <>
my-app/src/components/Transcribe//SavedTranscriptions.js:                  <button className="sn-save-button" onClick={handleSave}>
my-app/src/components/Transcribe//SavedTranscriptions.js:                    Save
my-app/src/components/Transcribe//SavedTranscriptions.js:                  </button>
my-app/src/components/Transcribe//SavedTranscriptions.js:                  <button
my-app/src/components/Transcribe//SavedTranscriptions.js:                    className="sn-cancel-button"
my-app/src/components/Transcribe//SavedTranscriptions.js:                    onClick={() => setIsEditing(false)}
my-app/src/components/Transcribe//SavedTranscriptions.js:                  >
my-app/src/components/Transcribe//SavedTranscriptions.js:                    Cancel
my-app/src/components/Transcribe//SavedTranscriptions.js:                  </button>
my-app/src/components/Transcribe//SavedTranscriptions.js:                </>
my-app/src/components/Transcribe//SavedTranscriptions.js:              ) : (
my-app/src/components/Transcribe//SavedTranscriptions.js:                <button className="sn-edit-button" onClick={handleEdit}>
my-app/src/components/Transcribe//SavedTranscriptions.js:                  Edit
my-app/src/components/Transcribe//SavedTranscriptions.js:                </button>
my-app/src/components/Transcribe//SavedTranscriptions.js:              )}
my-app/src/components/Transcribe//SavedTranscriptions.js:              <button className="sn-delete-button" onClick={handleDelete}>
my-app/src/components/Transcribe//SavedTranscriptions.js:                Delete
my-app/src/components/Transcribe//SavedTranscriptions.js:              </button>
my-app/src/components/Transcribe//SavedTranscriptions.js:            </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:          </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:        </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:      )}
my-app/src/components/Transcribe//SavedTranscriptions.js:    </div>
my-app/src/components/Transcribe//SavedTranscriptions.js:  );
my-app/src/components/Transcribe//SavedTranscriptions.js:};
my-app/src/components/Transcribe//SavedTranscriptions.js:
my-app/src/components/Transcribe//SavedTranscriptions.js:export default SavedTranscriptions;
my-app/src/components/Transcribe//transcribe.js:import React, { useState, useEffect } from "react";
my-app/src/components/Transcribe//transcribe.js:import ReactMarkdown from "react-markdown";
my-app/src/components/Transcribe//transcribe.js:import "./transcribe.css";
my-app/src/components/Transcribe//transcribe.js:import { useNavigate } from "react-router-dom";
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:import { setDoc, doc, getDoc, updateDoc } from "firebase/firestore";
my-app/src/components/Transcribe//transcribe.js:import { db, auth } from "../../firebase/firebase";
my-app/src/components/Transcribe//transcribe.js:import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:import { saveToFirestore } from "../../firebase/firebase";
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:function Transcribe() {
my-app/src/components/Transcribe//transcribe.js:  const [file, setFile] = useState(null);
my-app/src/components/Transcribe//transcribe.js:  const [fileType, setFileType] = useState("");
my-app/src/components/Transcribe//transcribe.js:  const [result, setResult] = useState("");
my-app/src/components/Transcribe//transcribe.js:  const [isProcessing, setIsProcessing] = useState(false);
my-app/src/components/Transcribe//transcribe.js:  const [isFileValid, setIsFileValid] = useState(false);
my-app/src/components/Transcribe//transcribe.js:  const [error, setError] = useState("");
my-app/src/components/Transcribe//transcribe.js:  const [savedTranscriptions, setSavedTranscriptions] = useState([]);
my-app/src/components/Transcribe//transcribe.js:  const [showDisclaimer, setShowDisclaimer] = useState(false);
my-app/src/components/Transcribe//transcribe.js:  const navigate = useNavigate();
my-app/src/components/Transcribe//transcribe.js:  const [showSaveDisclaimer, setShowSaveDisclaimer] = useState(false);
my-app/src/components/Transcribe//transcribe.js:  const [saveName, setSaveName] = useState("");
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const [user, setUser] = useState(null);
my-app/src/components/Transcribe//transcribe.js:  const [generationCount, setGenerationCount] = useState(0);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  useEffect(() => {
my-app/src/components/Transcribe//transcribe.js:    const fetchData = async () => {
my-app/src/components/Transcribe//transcribe.js:      const currentUser = auth.currentUser;
my-app/src/components/Transcribe//transcribe.js:      if (currentUser) {
my-app/src/components/Transcribe//transcribe.js:        setUser(currentUser);
my-app/src/components/Transcribe//transcribe.js:        const userDocRef = doc(db, "users", currentUser.uid);
my-app/src/components/Transcribe//transcribe.js:        const userDoc = await getDoc(userDocRef);
my-app/src/components/Transcribe//transcribe.js:        if (userDoc.exists()) {
my-app/src/components/Transcribe//transcribe.js:          setGenerationCount(userDoc.data().generationCount || 0);
my-app/src/components/Transcribe//transcribe.js:        }
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:    };
my-app/src/components/Transcribe//transcribe.js:    fetchData();
my-app/src/components/Transcribe//transcribe.js:    console.log("API Key:", process.env.REACT_APP_OPENAI_API_KEY);
my-app/src/components/Transcribe//transcribe.js:  }, []);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const validFileTypes = ["image/png", "image/jpeg", "audio/mpeg"];
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleFileChange = (e) => {
my-app/src/components/Transcribe//transcribe.js:    const selectedFile = e.target.files[0];
my-app/src/components/Transcribe//transcribe.js:    if (selectedFile) {
my-app/src/components/Transcribe//transcribe.js:      setFile(selectedFile);
my-app/src/components/Transcribe//transcribe.js:      const fileType = selectedFile.type.split("/")[0];
my-app/src/components/Transcribe//transcribe.js:      setFileType(fileType);
my-app/src/components/Transcribe//transcribe.js:      setIsFileValid(
my-app/src/components/Transcribe//transcribe.js:        validFileTypes.includes(selectedFile.type) &&
my-app/src/components/Transcribe//transcribe.js:          selectedFile.size <= 2 * 1024 * 1024
my-app/src/components/Transcribe//transcribe.js:      );
my-app/src/components/Transcribe//transcribe.js:      setError("");
my-app/src/components/Transcribe//transcribe.js:    } else {
my-app/src/components/Transcribe//transcribe.js:      setFile(null);
my-app/src/components/Transcribe//transcribe.js:      setFileType("");
my-app/src/components/Transcribe//transcribe.js:      setIsFileValid(false);
my-app/src/components/Transcribe//transcribe.js:      setError("Please select a file.");
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleUpload = async () => {
my-app/src/components/Transcribe//transcribe.js:    if (generationCount >= 15) {
my-app/src/components/Transcribe//transcribe.js:      alert("You have reached the maximum number of generations.");
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    alert(
my-app/src/components/Transcribe//transcribe.js:      `You have ${
my-app/src/components/Transcribe//transcribe.js:        3 - generationCount
my-app/src/components/Transcribe//transcribe.js:      } transcriptions left. This action cannot be undone.`
my-app/src/components/Transcribe//transcribe.js:    );
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    setIsProcessing(true);
my-app/src/components/Transcribe//transcribe.js:    setError("");
my-app/src/components/Transcribe//transcribe.js:    try {
my-app/src/components/Transcribe//transcribe.js:      let transcribedText = "";
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      if (fileType === "image") {
my-app/src/components/Transcribe//transcribe.js:        transcribedText = await processImage(file);
my-app/src/components/Transcribe//transcribe.js:      } else if (fileType === "audio") {
my-app/src/components/Transcribe//transcribe.js:        transcribedText = await processAudio(file);
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const organizedText = await organizeText(transcribedText);
my-app/src/components/Transcribe//transcribe.js:      setResult(organizedText);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      // Fetch the current user's document
my-app/src/components/Transcribe//transcribe.js:      const userDocRef = doc(db, "users", user.uid);
my-app/src/components/Transcribe//transcribe.js:      const userDoc = await getDoc(userDocRef);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      if (userDoc.exists()) {
my-app/src/components/Transcribe//transcribe.js:        let currentCount = userDoc.data().generationCount || 0;
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:        // Update the generation count in Firestore
my-app/src/components/Transcribe//transcribe.js:        await updateDoc(userDocRef, { generationCount: currentCount + 1 });
my-app/src/components/Transcribe//transcribe.js:        setGenerationCount(currentCount + 1);
my-app/src/components/Transcribe//transcribe.js:      } else {
my-app/src/components/Transcribe//transcribe.js:        setError("User document does not exist.");
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:    } catch (error) {
my-app/src/components/Transcribe//transcribe.js:      console.error("Error during processing:", error);
my-app/src/components/Transcribe//transcribe.js:      setError(`An error occurred during processing: ${error.message}`);
my-app/src/components/Transcribe//transcribe.js:    } finally {
my-app/src/components/Transcribe//transcribe.js:      setIsProcessing(false);
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleReset = () => {
my-app/src/components/Transcribe//transcribe.js:    setFile(null);
my-app/src/components/Transcribe//transcribe.js:    setFileType("");
my-app/src/components/Transcribe//transcribe.js:    setResult("");
my-app/src/components/Transcribe//transcribe.js:    setIsFileValid(false);
my-app/src/components/Transcribe//transcribe.js:    setError("");
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const processAudio = async (file) => {
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const processImage = async (file) => {
my-app/src/components/Transcribe//transcribe.js:    try {
my-app/src/components/Transcribe//transcribe.js:      const fileData = await file.arrayBuffer();
my-app/src/components/Transcribe//transcribe.js:      const base64Image = btoa(
my-app/src/components/Transcribe//transcribe.js:        new Uint8Array(fileData).reduce(
my-app/src/components/Transcribe//transcribe.js:          (data, byte) => data + String.fromCharCode(byte),
my-app/src/components/Transcribe//transcribe.js:          ""
my-app/src/components/Transcribe//transcribe.js:        )
my-app/src/components/Transcribe//transcribe.js:      );
my-app/src/components/Transcribe//transcribe.js:      const response = await fetch(
my-app/src/components/Transcribe//transcribe.js:        "https://api.openai.com/v1/chat/completions",
my-app/src/components/Transcribe//transcribe.js:        {
my-app/src/components/Transcribe//transcribe.js:          method: "POST",
my-app/src/components/Transcribe//transcribe.js:          headers: {
my-app/src/components/Transcribe//transcribe.js:            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Transcribe//transcribe.js:            "Content-Type": "application/json",
my-app/src/components/Transcribe//transcribe.js:          },
my-app/src/components/Transcribe//transcribe.js:          body: JSON.stringify({
my-app/src/components/Transcribe//transcribe.js:            model: "gpt-4o-mini",
my-app/src/components/Transcribe//transcribe.js:            messages: [
my-app/src/components/Transcribe//transcribe.js:              {
my-app/src/components/Transcribe//transcribe.js:                role: "user",
my-app/src/components/Transcribe//transcribe.js:                content: [
my-app/src/components/Transcribe//transcribe.js:                  { type: "text", text: "What's in this image?" },
my-app/src/components/Transcribe//transcribe.js:                  {
my-app/src/components/Transcribe//transcribe.js:                    type: "image_url",
my-app/src/components/Transcribe//transcribe.js:                    image_url: {
my-app/src/components/Transcribe//transcribe.js:                      url: `data:image/jpeg;base64,${base64Image}`,
my-app/src/components/Transcribe//transcribe.js:                    },
my-app/src/components/Transcribe//transcribe.js:                  },
my-app/src/components/Transcribe//transcribe.js:                ],
my-app/src/components/Transcribe//transcribe.js:              },
my-app/src/components/Transcribe//transcribe.js:            ],
my-app/src/components/Transcribe//transcribe.js:            max_tokens: 300,
my-app/src/components/Transcribe//transcribe.js:          }),
my-app/src/components/Transcribe//transcribe.js:        }
my-app/src/components/Transcribe//transcribe.js:      );
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const data = await response.json();
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      if (
my-app/src/components/Transcribe//transcribe.js:        data.choices &&
my-app/src/components/Transcribe//transcribe.js:        data.choices.length > 0 &&
my-app/src/components/Transcribe//transcribe.js:        data.choices[0].message &&
my-app/src/components/Transcribe//transcribe.js:        data.choices[0].message.content
my-app/src/components/Transcribe//transcribe.js:      ) {
my-app/src/components/Transcribe//transcribe.js:      } else if (data.error) {
my-app/src/components/Transcribe//transcribe.js:        throw new Error(data.error.message);
my-app/src/components/Transcribe//transcribe.js:      } else {
my-app/src/components/Transcribe//transcribe.js:        console.error("Unexpected API response format:", data);
my-app/src/components/Transcribe//transcribe.js:        throw new Error("Unexpected API response format");
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:    } catch (error) {
my-app/src/components/Transcribe//transcribe.js:      console.error("Error processing image:", error);
my-app/src/components/Transcribe//transcribe.js:      console.error("Error details:", error.message);
my-app/src/components/Transcribe//transcribe.js:      throw error;
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const transcribeAudio = async (audioFile) => {
my-app/src/components/Transcribe//transcribe.js:    try {
my-app/src/components/Transcribe//transcribe.js:      const formData = new FormData();
my-app/src/components/Transcribe//transcribe.js:      formData.append("file", audioFile);
my-app/src/components/Transcribe//transcribe.js:      formData.append("model", "whisper-1");
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const response = await fetch(
my-app/src/components/Transcribe//transcribe.js:        "https://api.openai.com/v1/audio/transcriptions",
my-app/src/components/Transcribe//transcribe.js:        {
my-app/src/components/Transcribe//transcribe.js:          method: "POST",
my-app/src/components/Transcribe//transcribe.js:          headers: {
my-app/src/components/Transcribe//transcribe.js:            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Transcribe//transcribe.js:          },
my-app/src/components/Transcribe//transcribe.js:          body: formData,
my-app/src/components/Transcribe//transcribe.js:        }
my-app/src/components/Transcribe//transcribe.js:      );
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const responseData = await response.json();
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      if (!response.ok) {
my-app/src/components/Transcribe//transcribe.js:        console.error("Error response from API:", responseData);
my-app/src/components/Transcribe//transcribe.js:        throw new Error(
my-app/src/components/Transcribe//transcribe.js:          `API request failed with status ${response.status}: ${JSON.stringify(
my-app/src/components/Transcribe//transcribe.js:            responseData
my-app/src/components/Transcribe//transcribe.js:          )}`
my-app/src/components/Transcribe//transcribe.js:        );
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    } catch (error) {
my-app/src/components/Transcribe//transcribe.js:      console.error("Error during audio transcription:", error);
my-app/src/components/Transcribe//transcribe.js:      throw error;
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const organizeText = async (text) => {
my-app/src/components/Transcribe//transcribe.js:    const response = await fetch("https://api.openai.com/v1/chat/completions", {
my-app/src/components/Transcribe//transcribe.js:      method: "POST",
my-app/src/components/Transcribe//transcribe.js:      headers: {
my-app/src/components/Transcribe//transcribe.js:        Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Transcribe//transcribe.js:        "Content-Type": "application/json",
my-app/src/components/Transcribe//transcribe.js:      },
my-app/src/components/Transcribe//transcribe.js:      body: JSON.stringify({
my-app/src/components/Transcribe//transcribe.js:        model: "gpt-4o-mini",
my-app/src/components/Transcribe//transcribe.js:        messages: [
my-app/src/components/Transcribe//transcribe.js:          {
my-app/src/components/Transcribe//transcribe.js:            role: "system",
my-app/src/components/Transcribe//transcribe.js:            content: "You are a helpful assistant that organizes text.",
my-app/src/components/Transcribe//transcribe.js:          },
my-app/src/components/Transcribe//transcribe.js:          {
my-app/src/components/Transcribe//transcribe.js:            role: "user",
my-app/src/components/Transcribe//transcribe.js:            content: `Organize the following text: ${text}`,
my-app/src/components/Transcribe//transcribe.js:          },
my-app/src/components/Transcribe//transcribe.js:        ],
my-app/src/components/Transcribe//transcribe.js:        max_tokens: 300,
my-app/src/components/Transcribe//transcribe.js:      }),
my-app/src/components/Transcribe//transcribe.js:    });
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    const data = await response.json();
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleDeleteClick = () => {
my-app/src/components/Transcribe//transcribe.js:    setShowDisclaimer(true); // Show the disclaimer when the delete button is clicked
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const confirmDelete = () => {
my-app/src/components/Transcribe//transcribe.js:    setResult(""); // Clear the transcription result
my-app/src/components/Transcribe//transcribe.js:    setShowDisclaimer(false); // Hide the disclaimer
my-app/src/components/Transcribe//transcribe.js:    handleReset();
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const cancelDelete = () => {
my-app/src/components/Transcribe//transcribe.js:    setShowDisclaimer(false); // Hide the disclaimer without deleting
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleSaveClick = () => {
my-app/src/components/Transcribe//transcribe.js:    setShowSaveDisclaimer(true); // Show the save disclaimer
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const confirmSave = async () => {
my-app/src/components/Transcribe//transcribe.js:    console.log("confirmSave: Initiating save process.");
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    const currentUser = auth.currentUser;
my-app/src/components/Transcribe//transcribe.js:    console.log("confirmSave: Current user:", currentUser);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    if (currentUser && saveName) {
my-app/src/components/Transcribe//transcribe.js:      console.log("confirmSave: Save name provided:", saveName);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      // Upload the image to Firebase Storage
my-app/src/components/Transcribe//transcribe.js:      let imageUrl = "";
my-app/src/components/Transcribe//transcribe.js:      if (fileType === "image" && file) {
my-app/src/components/Transcribe//transcribe.js:        const storage = getStorage();
my-app/src/components/Transcribe//transcribe.js:        const storageRef = ref(
my-app/src/components/Transcribe//transcribe.js:          storage,
my-app/src/components/Transcribe//transcribe.js:          `images/${currentUser.uid}/${Date.now()}_${file.name}`
my-app/src/components/Transcribe//transcribe.js:        );
my-app/src/components/Transcribe//transcribe.js:        await uploadBytes(storageRef, file);
my-app/src/components/Transcribe//transcribe.js:        imageUrl = await getDownloadURL(storageRef);
my-app/src/components/Transcribe//transcribe.js:      }
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const userDocPath = `users/${currentUser.uid}/transcriptions/${saveName}`;
my-app/src/components/Transcribe//transcribe.js:      console.log("confirmSave: Document path constructed:", userDocPath);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      const newTranscription = {
my-app/src/components/Transcribe//transcribe.js:        id: Date.now(),
my-app/src/components/Transcribe//transcribe.js:        title: saveName || `Transcription ${generationCount + 1}`,
my-app/src/components/Transcribe//transcribe.js:        text: result,
my-app/src/components/Transcribe//transcribe.js:        imageUrl: imageUrl, // Save the image URL in Firestore
my-app/src/components/Transcribe//transcribe.js:      };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      setSavedTranscriptions([...savedTranscriptions, newTranscription]);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      await saveToFirestore(userDocPath, newTranscription);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      handleReset();
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      setShowSaveDisclaimer(false);
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      navigate("/savedtranscriptions");
my-app/src/components/Transcribe//transcribe.js:    } else {
my-app/src/components/Transcribe//transcribe.js:      console.error("confirmSave: Missing currentUser or saveName.");
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleDragOver = (event) => {
my-app/src/components/Transcribe//transcribe.js:    event.preventDefault();
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const handleDrop = (event) => {
my-app/src/components/Transcribe//transcribe.js:    event.preventDefault();
my-app/src/components/Transcribe//transcribe.js:    const file = event.dataTransfer.files[0];
my-app/src/components/Transcribe//transcribe.js:    if (file) {
my-app/src/components/Transcribe//transcribe.js:      handleFileChange({ target: { files: [file] } });
my-app/src/components/Transcribe//transcribe.js:    }
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:  const resetUpload = () => {
my-app/src/components/Transcribe//transcribe.js:    setFile(null);
my-app/src/components/Transcribe//transcribe.js:    setResult(null);
my-app/src/components/Transcribe//transcribe.js:    setError(null);
my-app/src/components/Transcribe//transcribe.js:  };
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:    <div>
my-app/src/components/Transcribe//transcribe.js:      <button
my-app/src/components/Transcribe//transcribe.js:        className="rt-back-button"
my-app/src/components/Transcribe//transcribe.js:        onClick={() => navigate("/savedtranscriptions")}
my-app/src/components/Transcribe//transcribe.js:      >
my-app/src/components/Transcribe//transcribe.js:        &#9664;
my-app/src/components/Transcribe//transcribe.js:      </button>
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:      <div className="transcribe-result-upload-wrapper">
my-app/src/components/Transcribe//transcribe.js:        <div className="st-squircle-banner">
my-app/src/components/Transcribe//transcribe.js:          Convert images and audio to text
my-app/src/components/Transcribe//transcribe.js:        </div>
my-app/src/components/Transcribe//transcribe.js:        {!file && !result && (
my-app/src/components/Transcribe//transcribe.js:          <div
my-app/src/components/Transcribe//transcribe.js:            className="transcribe-result-upload-container"
my-app/src/components/Transcribe//transcribe.js:            onDragOver={handleDragOver}
my-app/src/components/Transcribe//transcribe.js:            onDrop={handleDrop}
my-app/src/components/Transcribe//transcribe.js:          >
my-app/src/components/Transcribe//transcribe.js:            <div className="transcribe-result-arrow-up-logo">
my-app/src/components/Transcribe//transcribe.js:              <i className="fas fa-upload"></i>
my-app/src/components/Transcribe//transcribe.js:            </div>
my-app/src/components/Transcribe//transcribe.js:            <div className="transcribe-result-text">
my-app/src/components/Transcribe//transcribe.js:              Drag and drop your audio file here
my-app/src/components/Transcribe//transcribe.js:            </div>
my-app/src/components/Transcribe//transcribe.js:            <button
my-app/src/components/Transcribe//transcribe.js:              className="transcribe-result-upload-button"
my-app/src/components/Transcribe//transcribe.js:              onClick={() => document.getElementById("fileInput").click()}
my-app/src/components/Transcribe//transcribe.js:            >
my-app/src/components/Transcribe//transcribe.js:              Select from Device
my-app/src/components/Transcribe//transcribe.js:            </button>
my-app/src/components/Transcribe//transcribe.js:            <input
my-app/src/components/Transcribe//transcribe.js:              id="fileInput"
my-app/src/components/Transcribe//transcribe.js:              type="file"
my-app/src/components/Transcribe//transcribe.js:              accept=".png,.jpg,.jpeg,.mp3"
my-app/src/components/Transcribe//transcribe.js:              onChange={handleFileChange}
my-app/src/components/Transcribe//transcribe.js:              className="transcribe-result-hidden"
my-app/src/components/Transcribe//transcribe.js:            />
my-app/src/components/Transcribe//transcribe.js:            <div className="transcribe-result-drag-and-drop-text">
my-app/src/components/Transcribe//transcribe.js:              MP3, WAV, M4A, MP4, MPEG, MPGA, WEBM
my-app/src/components/Transcribe//transcribe.js:            </div>
my-app/src/components/Transcribe//transcribe.js:          </div>
my-app/src/components/Transcribe//transcribe.js:        )}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:        {file && (
my-app/src/components/Transcribe//transcribe.js:          <div className="transcribe-result-wrapper">
my-app/src/components/Transcribe//transcribe.js:            <div className="transcribe-result-container">
my-app/src/components/Transcribe//transcribe.js:              <div className="transcribe-result-preview">
my-app/src/components/Transcribe//transcribe.js:                {fileType === "image" ? (
my-app/src/components/Transcribe//transcribe.js:                  <img
my-app/src/components/Transcribe//transcribe.js:                    src={URL.createObjectURL(file)}
my-app/src/components/Transcribe//transcribe.js:                    alt="Uploaded file preview"
my-app/src/components/Transcribe//transcribe.js:                    className="transcribe-result-uploaded-image"
my-app/src/components/Transcribe//transcribe.js:                  />
my-app/src/components/Transcribe//transcribe.js:                ) : (
my-app/src/components/Transcribe//transcribe.js:                  <div className="transcribe-result-audio-logo">🎵</div>
my-app/src/components/Transcribe//transcribe.js:                )}
my-app/src/components/Transcribe//transcribe.js:              </div>
my-app/src/components/Transcribe//transcribe.js:              {result ? (
my-app/src/components/Transcribe//transcribe.js:                <div className="transcribe-result-transcription">
my-app/src/components/Transcribe//transcribe.js:                  <h3>Transcription Result:</h3>
my-app/src/components/Transcribe//transcribe.js:                  <ReactMarkdown className="transcribe-result-markdown-result">
my-app/src/components/Transcribe//transcribe.js:                    {result}
my-app/src/components/Transcribe//transcribe.js:                  </ReactMarkdown>
my-app/src/components/Transcribe//transcribe.js:                </div>
my-app/src/components/Transcribe//transcribe.js:              ) : (
my-app/src/components/Transcribe//transcribe.js:                <button
my-app/src/components/Transcribe//transcribe.js:                  className="transcribe-result-generate-button"
my-app/src/components/Transcribe//transcribe.js:                  onClick={handleUpload}
my-app/src/components/Transcribe//transcribe.js:                  disabled={isProcessing}
my-app/src/components/Transcribe//transcribe.js:                >
my-app/src/components/Transcribe//transcribe.js:                  {isProcessing ? "Loading..." : "Generate"}
my-app/src/components/Transcribe//transcribe.js:                </button>
my-app/src/components/Transcribe//transcribe.js:              )}
my-app/src/components/Transcribe//transcribe.js:            </div>
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:            {!result && (
my-app/src/components/Transcribe//transcribe.js:              <button
my-app/src/components/Transcribe//transcribe.js:                className="transcribe-result-upload-another-button"
my-app/src/components/Transcribe//transcribe.js:                onClick={resetUpload}
my-app/src/components/Transcribe//transcribe.js:                disabled={isProcessing}
my-app/src/components/Transcribe//transcribe.js:              >
my-app/src/components/Transcribe//transcribe.js:                Upload Another File
my-app/src/components/Transcribe//transcribe.js:              </button>
my-app/src/components/Transcribe//transcribe.js:            )}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:            {result && (
my-app/src/components/Transcribe//transcribe.js:              <div className="transcribe-result-buttons-container">
my-app/src/components/Transcribe//transcribe.js:                <button onClick={handleSaveClick}>Save</button>
my-app/src/components/Transcribe//transcribe.js:                <button onClick={handleDeleteClick}>Delete</button>
my-app/src/components/Transcribe//transcribe.js:              </div>
my-app/src/components/Transcribe//transcribe.js:            )}
my-app/src/components/Transcribe//transcribe.js:          </div>
my-app/src/components/Transcribe//transcribe.js:        )}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:        {result && (
my-app/src/components/Transcribe//transcribe.js:          <div className="transcribe-result-disclaimer-container">
my-app/src/components/Transcribe//transcribe.js:            {showSaveDisclaimer && (
my-app/src/components/Transcribe//transcribe.js:              <div className="transcribe-result-disclaimer-overlay">
my-app/src/components/Transcribe//transcribe.js:                <div className="transcribe-result-disclaimer-content">
my-app/src/components/Transcribe//transcribe.js:                  <p>Please provide a name for your transcription:</p>
my-app/src/components/Transcribe//transcribe.js:                  <input
my-app/src/components/Transcribe//transcribe.js:                    type="text"
my-app/src/components/Transcribe//transcribe.js:                    value={saveName}
my-app/src/components/Transcribe//transcribe.js:                    onChange={(e) => setSaveName(e.target.value)}
my-app/src/components/Transcribe//transcribe.js:                    placeholder="Enter name"
my-app/src/components/Transcribe//transcribe.js:                  />
my-app/src/components/Transcribe//transcribe.js:                  <button onClick={confirmSave}>Save</button>
my-app/src/components/Transcribe//transcribe.js:                  <button onClick={() => setShowSaveDisclaimer(false)}>
my-app/src/components/Transcribe//transcribe.js:                    Cancel
my-app/src/components/Transcribe//transcribe.js:                  </button>
my-app/src/components/Transcribe//transcribe.js:                </div>
my-app/src/components/Transcribe//transcribe.js:              </div>
my-app/src/components/Transcribe//transcribe.js:            )}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:            {showDisclaimer && (
my-app/src/components/Transcribe//transcribe.js:              <div className="transcribe-result-disclaimer-overlay">
my-app/src/components/Transcribe//transcribe.js:                <div className="transcribe-result-disclaimer-content">
my-app/src/components/Transcribe//transcribe.js:                  <p>
my-app/src/components/Transcribe//transcribe.js:                    Are you sure you want to delete this transcription? This
my-app/src/components/Transcribe//transcribe.js:                    action cannot be undone.
my-app/src/components/Transcribe//transcribe.js:                  </p>
my-app/src/components/Transcribe//transcribe.js:                  <button onClick={confirmDelete}>Yes, Delete</button>
my-app/src/components/Transcribe//transcribe.js:                  <button onClick={cancelDelete}>Cancel</button>
my-app/src/components/Transcribe//transcribe.js:                </div>
my-app/src/components/Transcribe//transcribe.js:              </div>
my-app/src/components/Transcribe//transcribe.js:            )}
my-app/src/components/Transcribe//transcribe.js:          </div>
my-app/src/components/Transcribe//transcribe.js:        )}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:        {error && <p className="transcribe-result-error-text">{error}</p>}
my-app/src/components/Transcribe//transcribe.js:      </div>
my-app/src/components/Transcribe//transcribe.js:    </div>
my-app/src/components/Transcribe//transcribe.js:  );
my-app/src/components/Transcribe//transcribe.js:}
my-app/src/components/Transcribe//transcribe.js:
my-app/src/components/Transcribe//transcribe.js:export default Transcribe;
my-app/src/components/Quiz_ai//Test/TestResults.js:// src/components/Quiz_ai/Test/TestResults.js
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:import React from "react";
my-app/src/components/Quiz_ai//Test/TestResults.js:import { useNavigate, useLocation } from "react-router-dom";
my-app/src/components/Quiz_ai//Test/TestResults.js:import "./TestResults.css";
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:const TestResults = ({ results: propResults, flashcards: propFlashcards, deckName: propDeckName, onRetake }) => {
my-app/src/components/Quiz_ai//Test/TestResults.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//Test/TestResults.js:  const location = useLocation();
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:  // Use props if provided; otherwise, use location.state
my-app/src/components/Quiz_ai//Test/TestResults.js:  const results = propResults || (location.state && location.state.results);
my-app/src/components/Quiz_ai//Test/TestResults.js:  const flashcards = propFlashcards || (location.state && location.state.flashcards);
my-app/src/components/Quiz_ai//Test/TestResults.js:  const deckNameFinal = propDeckName || (location.state && location.state.deckName);
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:  if (!results || !flashcards || !deckNameFinal) {
my-app/src/components/Quiz_ai//Test/TestResults.js:  }
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:  const correctCount = results.filter((result) => result.correct).length;
my-app/src/components/Quiz_ai//Test/TestResults.js:  const totalQuestions = flashcards.length;
my-app/src/components/Quiz_ai//Test/TestResults.js:  
my-app/src/components/Quiz_ai//Test/TestResults.js:    <div className="test-results">
my-app/src/components/Quiz_ai//Test/TestResults.js:      <h2>Test Results</h2>
my-app/src/components/Quiz_ai//Test/TestResults.js:      <p className="summary">
my-app/src/components/Quiz_ai//Test/TestResults.js:        You answered <strong>{correctCount}</strong> out of{" "}
my-app/src/components/Quiz_ai//Test/TestResults.js:        <strong>{totalQuestions}</strong> questions correctly.
my-app/src/components/Quiz_ai//Test/TestResults.js:      </p>
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:      {results.map((result, index) => (
my-app/src/components/Quiz_ai//Test/TestResults.js:        <div key={index} className="result-card">
my-app/src/components/Quiz_ai//Test/TestResults.js:          <div className="result-card-header">
my-app/src/components/Quiz_ai//Test/TestResults.js:            <h3>Question {index + 1}</h3>
my-app/src/components/Quiz_ai//Test/TestResults.js:            <p
my-app/src/components/Quiz_ai//Test/TestResults.js:              className={`result-status ${
my-app/src/components/Quiz_ai//Test/TestResults.js:                result.correct
my-app/src/components/Quiz_ai//Test/TestResults.js:                  ? "correct"
my-app/src/components/Quiz_ai//Test/TestResults.js:                  : result.skipped
my-app/src/components/Quiz_ai//Test/TestResults.js:                  ? "skipped"
my-app/src/components/Quiz_ai//Test/TestResults.js:                  : "incorrect"
my-app/src/components/Quiz_ai//Test/TestResults.js:              }`}
my-app/src/components/Quiz_ai//Test/TestResults.js:            >
my-app/src/components/Quiz_ai//Test/TestResults.js:              {result.correct
my-app/src/components/Quiz_ai//Test/TestResults.js:                ? "✔️ Correct"
my-app/src/components/Quiz_ai//Test/TestResults.js:                : result.skipped
my-app/src/components/Quiz_ai//Test/TestResults.js:                ? "⏭️ Skipped"
my-app/src/components/Quiz_ai//Test/TestResults.js:                : "❌ Incorrect"}
my-app/src/components/Quiz_ai//Test/TestResults.js:            </p>
my-app/src/components/Quiz_ai//Test/TestResults.js:          </div>
my-app/src/components/Quiz_ai//Test/TestResults.js:          <div className="result-card-body">
my-app/src/components/Quiz_ai//Test/TestResults.js:            <p className="question-text">{flashcards[index].question}</p>
my-app/src/components/Quiz_ai//Test/TestResults.js:            <p
my-app/src/components/Quiz_ai//Test/TestResults.js:              className={`your-answer ${
my-app/src/components/Quiz_ai//Test/TestResults.js:                result.correct ? "correct" : "incorrect"
my-app/src/components/Quiz_ai//Test/TestResults.js:              }`}
my-app/src/components/Quiz_ai//Test/TestResults.js:            >
my-app/src/components/Quiz_ai//Test/TestResults.js:              <strong>Your Answer:</strong> {result.userAnswer || "No Answer"}
my-app/src/components/Quiz_ai//Test/TestResults.js:            </p>
my-app/src/components/Quiz_ai//Test/TestResults.js:            <p className="correct-answer">
my-app/src/components/Quiz_ai//Test/TestResults.js:              <strong>Correct Answer:</strong> {flashcards[index].answer}
my-app/src/components/Quiz_ai//Test/TestResults.js:            </p>
my-app/src/components/Quiz_ai//Test/TestResults.js:            {result.hintUsed && <p className="hint-used">Hint Used</p>}
my-app/src/components/Quiz_ai//Test/TestResults.js:          </div>
my-app/src/components/Quiz_ai//Test/TestResults.js:        </div>
my-app/src/components/Quiz_ai//Test/TestResults.js:      ))}
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:      <div className="results-buttons">
my-app/src/components/Quiz_ai//Test/TestResults.js:        {onRetake && (
my-app/src/components/Quiz_ai//Test/TestResults.js:          <button className="btn btn-primary" onClick={onRetake}>
my-app/src/components/Quiz_ai//Test/TestResults.js:            Retake Test
my-app/src/components/Quiz_ai//Test/TestResults.js:          </button>
my-app/src/components/Quiz_ai//Test/TestResults.js:        )}
my-app/src/components/Quiz_ai//Test/TestResults.js:        <button
my-app/src/components/Quiz_ai//Test/TestResults.js:          className="btn btn-secondary"
my-app/src/components/Quiz_ai//Test/TestResults.js:          onClick={() => navigate(`/deck/${deckNameFinal}/flashcard-input`)}
my-app/src/components/Quiz_ai//Test/TestResults.js:        >
my-app/src/components/Quiz_ai//Test/TestResults.js:          Back to Flashcard
my-app/src/components/Quiz_ai//Test/TestResults.js:        </button>
my-app/src/components/Quiz_ai//Test/TestResults.js:      </div>
my-app/src/components/Quiz_ai//Test/TestResults.js:    </div>
my-app/src/components/Quiz_ai//Test/TestResults.js:  );
my-app/src/components/Quiz_ai//Test/TestResults.js:};
my-app/src/components/Quiz_ai//Test/TestResults.js:
my-app/src/components/Quiz_ai//Test/TestResults.js:export default TestResults;
my-app/src/components/Quiz_ai//Test/Review.js:import React, { useState, useEffect } from 'react';
my-app/src/components/Quiz_ai//Test/Review.js:import { useParams, useNavigate } from 'react-router-dom';
my-app/src/components/Quiz_ai//Test/Review.js:import { doc, getDoc } from 'firebase/firestore';
my-app/src/components/Quiz_ai//Test/Review.js:import { db, auth } from '../../../firebase/firebase'; // Ensure this path is correct
my-app/src/components/Quiz_ai//Test/Review.js:import { onAuthStateChanged } from 'firebase/auth';
my-app/src/components/Quiz_ai//Test/Review.js:import './Review.css';
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:const Review = () => {
my-app/src/components/Quiz_ai//Test/Review.js:  const { deckName } = useParams();
my-app/src/components/Quiz_ai//Test/Review.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//Test/Review.js:  const [flashcards, setFlashcards] = useState([]);
my-app/src/components/Quiz_ai//Test/Review.js:  const [currentCardIndex, setCurrentCardIndex] = useState(0);
my-app/src/components/Quiz_ai//Test/Review.js:  const [showAnswer, setShowAnswer] = useState(false);
my-app/src/components/Quiz_ai//Test/Review.js:  const [isRecording, setIsRecording] = useState(false);
my-app/src/components/Quiz_ai//Test/Review.js:  const [isLoading, setIsLoading] = useState(false);
my-app/src/components/Quiz_ai//Test/Review.js:  const [comparisonResult, setComparisonResult] = useState('');
my-app/src/components/Quiz_ai//Test/Review.js:  const [hint, setHint] = useState('');
my-app/src/components/Quiz_ai//Test/Review.js:  const [mediaRecorder, setMediaRecorder] = useState(null);
my-app/src/components/Quiz_ai//Test/Review.js:  const [typingMode, setTypingMode] = useState(false);
my-app/src/components/Quiz_ai//Test/Review.js:  const [typedAnswer, setTypedAnswer] = useState('');
my-app/src/components/Quiz_ai//Test/Review.js:  const [ setWasCorrect] = useState(false);
my-app/src/components/Quiz_ai//Test/Review.js:  const [ setCorrectAnswers] = useState(0);
my-app/src/components/Quiz_ai//Test/Review.js:  const [correctlyAnsweredQuestions, setCorrectlyAnsweredQuestions] = useState(new Set());
my-app/src/components/Quiz_ai//Test/Review.js:  const [user, setUser] = useState(null);
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Test/Review.js:    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
my-app/src/components/Quiz_ai//Test/Review.js:      if (currentUser) {
my-app/src/components/Quiz_ai//Test/Review.js:        setUser(currentUser);
my-app/src/components/Quiz_ai//Test/Review.js:        console.log('User signed in:', currentUser);
my-app/src/components/Quiz_ai//Test/Review.js:      } else {
my-app/src/components/Quiz_ai//Test/Review.js:        setUser(null);
my-app/src/components/Quiz_ai//Test/Review.js:        console.log('User signed out');
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:    });
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  }, []);
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Test/Review.js:    const fetchFlashcards = async () => {
my-app/src/components/Quiz_ai//Test/Review.js:      if (user) {
my-app/src/components/Quiz_ai//Test/Review.js:        setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Review.js:        const flashcardsDocRef = doc(db, `users/${user.uid}/decks`, deckName);
my-app/src/components/Quiz_ai//Test/Review.js:        const flashcardsDoc = await getDoc(flashcardsDocRef);
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:        if (flashcardsDoc.exists()) {
my-app/src/components/Quiz_ai//Test/Review.js:          const flashcardsData = flashcardsDoc.data().flashcards || [];
my-app/src/components/Quiz_ai//Test/Review.js:          setFlashcards(flashcardsData);
my-app/src/components/Quiz_ai//Test/Review.js:        } else {
my-app/src/components/Quiz_ai//Test/Review.js:          console.error('No such document!');
my-app/src/components/Quiz_ai//Test/Review.js:        }
my-app/src/components/Quiz_ai//Test/Review.js:        setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:    };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    fetchFlashcards();
my-app/src/components/Quiz_ai//Test/Review.js:  }, [user, deckName]);
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  // with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:// with backend ^^^^
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const startRecording = async (setIsRecording, setMediaRecorder, processRecording) => {
my-app/src/components/Quiz_ai//Test/Review.js:    setIsRecording(true);
my-app/src/components/Quiz_ai//Test/Review.js:    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
my-app/src/components/Quiz_ai//Test/Review.js:    const recorder = new MediaRecorder(stream);
my-app/src/components/Quiz_ai//Test/Review.js:    setMediaRecorder(recorder);
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    recorder.ondataavailable = (event) => {
my-app/src/components/Quiz_ai//Test/Review.js:      const audioBlob = event.data;
my-app/src/components/Quiz_ai//Test/Review.js:      processRecording(audioBlob);
my-app/src/components/Quiz_ai//Test/Review.js:    };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    recorder.start();
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const finishRecording = (mediaRecorder, setIsRecording, setIsLoading) => {
my-app/src/components/Quiz_ai//Test/Review.js:    if (mediaRecorder) {
my-app/src/components/Quiz_ai//Test/Review.js:      mediaRecorder.onstop = () => {
my-app/src/components/Quiz_ai//Test/Review.js:        const tracks = mediaRecorder.stream.getTracks();
my-app/src/components/Quiz_ai//Test/Review.js:        tracks.forEach(track => track.stop());
my-app/src/components/Quiz_ai//Test/Review.js:        setIsRecording(false);
my-app/src/components/Quiz_ai//Test/Review.js:        setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Review.js:      };
my-app/src/components/Quiz_ai//Test/Review.js:      mediaRecorder.stop();
my-app/src/components/Quiz_ai//Test/Review.js:    }
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const processRecording = async (audioBlob) => {
my-app/src/components/Quiz_ai//Test/Review.js:    const formData = new FormData();
my-app/src/components/Quiz_ai//Test/Review.js:    formData.append('model', 'whisper-1');
my-app/src/components/Quiz_ai//Test/Review.js:    formData.append('file', new Blob([audioBlob], { type: 'audio/mp3' }), 'audio/mp3');
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    try {
my-app/src/components/Quiz_ai//Test/Review.js:      const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
my-app/src/components/Quiz_ai//Test/Review.js:        method: 'POST',
my-app/src/components/Quiz_ai//Test/Review.js:        headers: {
my-app/src/components/Quiz_ai//Test/Review.js:          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Review.js:        },
my-app/src/components/Quiz_ai//Test/Review.js:        body: formData
my-app/src/components/Quiz_ai//Test/Review.js:      });
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Review.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:        throw new Error(`Error: ${response.status} ${response.statusText} - ${JSON.stringify(errorDetail)}`);
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:      compareQuestion(data.text);
my-app/src/components/Quiz_ai//Test/Review.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Review.js:      setComparisonResult(`Error: ${error.message}`);
my-app/src/components/Quiz_ai//Test/Review.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Review.js:    }
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const compareQuestion = async (userQuestion) => {
my-app/src/components/Quiz_ai//Test/Review.js:    const originalQuestion = flashcards[currentCardIndex].question;
my-app/src/components/Quiz_ai//Test/Review.js:    const originalAnswer = flashcards[currentCardIndex].answer;
my-app/src/components/Quiz_ai//Test/Review.js:    const userAnswer = typingMode ? typedAnswer : userQuestion;
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    const messages = [
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'system', content: 'You are a helpful assistant. Answer strictly yes or no.' },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: `Original Question: ${originalQuestion}` },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: `Original Answer: ${originalAnswer}` },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: `User Answer: ${userAnswer}` },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: 'Do the user answer and the original answer convey similar meanings or support the same idea? Answer strictly yes or no.' }
my-app/src/components/Quiz_ai//Test/Review.js:    ];
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    try {
my-app/src/components/Quiz_ai//Test/Review.js:      const response = await fetch('https://api.openai.com/v1/chat/completions', {
my-app/src/components/Quiz_ai//Test/Review.js:        method: 'POST',
my-app/src/components/Quiz_ai//Test/Review.js:        headers: {
my-app/src/components/Quiz_ai//Test/Review.js:          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Review.js:          'Content-Type': 'application/json'
my-app/src/components/Quiz_ai//Test/Review.js:        },
my-app/src/components/Quiz_ai//Test/Review.js:        body: JSON.stringify({
my-app/src/components/Quiz_ai//Test/Review.js:          model: 'gpt-4o',
my-app/src/components/Quiz_ai//Test/Review.js:          messages: messages,
my-app/src/components/Quiz_ai//Test/Review.js:          max_tokens: 10
my-app/src/components/Quiz_ai//Test/Review.js:        })
my-app/src/components/Quiz_ai//Test/Review.js:      });
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Review.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:        throw new Error(`Error: ${response.status} ${response.statusText} - ${JSON.stringify(errorDetail)}`);
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      if (data.choices && data.choices.length > 0) {
my-app/src/components/Quiz_ai//Test/Review.js:        const result = data.choices[0].message.content.trim().replace('.', '').toLowerCase();
my-app/src/components/Quiz_ai//Test/Review.js:        if (result === 'yes') {
my-app/src/components/Quiz_ai//Test/Review.js:          if (!correctlyAnsweredQuestions.has(currentCardIndex)) {
my-app/src/components/Quiz_ai//Test/Review.js:            setCorrectAnswers(prev => prev + 1);
my-app/src/components/Quiz_ai//Test/Review.js:            setCorrectlyAnsweredQuestions(prev => new Set(prev).add(currentCardIndex));
my-app/src/components/Quiz_ai//Test/Review.js:          }
my-app/src/components/Quiz_ai//Test/Review.js:          setComparisonResult('Correct');
my-app/src/components/Quiz_ai//Test/Review.js:          setWasCorrect(true);
my-app/src/components/Quiz_ai//Test/Review.js:        } else {
my-app/src/components/Quiz_ai//Test/Review.js:          setComparisonResult('Incorrect');
my-app/src/components/Quiz_ai//Test/Review.js:        }
my-app/src/components/Quiz_ai//Test/Review.js:      } else {
my-app/src/components/Quiz_ai//Test/Review.js:        setComparisonResult('Error: No response from model');
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Review.js:      setComparisonResult(`Error: ${error.message}`);
my-app/src/components/Quiz_ai//Test/Review.js:    } finally {
my-app/src/components/Quiz_ai//Test/Review.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Review.js:    }
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const handleNextCard = () => {
my-app/src/components/Quiz_ai//Test/Review.js:    setCurrentCardIndex((prevIndex) => (prevIndex + 1) % flashcards.length);
my-app/src/components/Quiz_ai//Test/Review.js:    resetState();
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const handlePreviousCard = () => {
my-app/src/components/Quiz_ai//Test/Review.js:    setCurrentCardIndex((prevIndex) => (prevIndex - 1 + flashcards.length) % flashcards.length);
my-app/src/components/Quiz_ai//Test/Review.js:    resetState();
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const handleCardClick = (index) => {
my-app/src/components/Quiz_ai//Test/Review.js:    setCurrentCardIndex(index);
my-app/src/components/Quiz_ai//Test/Review.js:    resetState();
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const resetState = () => {
my-app/src/components/Quiz_ai//Test/Review.js:    setShowAnswer(false);
my-app/src/components/Quiz_ai//Test/Review.js:    setComparisonResult('');
my-app/src/components/Quiz_ai//Test/Review.js:    setHint('');
my-app/src/components/Quiz_ai//Test/Review.js:    setWasCorrect(false);
my-app/src/components/Quiz_ai//Test/Review.js:    setTypedAnswer('');
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const handleShowAnswer = () => {
my-app/src/components/Quiz_ai//Test/Review.js:    setShowAnswer(!showAnswer);
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const getHint = async () => {
my-app/src/components/Quiz_ai//Test/Review.js:    setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Review.js:    setHint('');
my-app/src/components/Quiz_ai//Test/Review.js:    const originalQuestion = flashcards[currentCardIndex].question;
my-app/src/components/Quiz_ai//Test/Review.js:    const originalAnswer = flashcards[currentCardIndex].answer;
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    const messages = [
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'system', content: 'You are a helpful assistant.' },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: `Original Question: ${originalQuestion}` },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: `Original Answer: ${originalAnswer}` },
my-app/src/components/Quiz_ai//Test/Review.js:      { role: 'user', content: 'The user\'s answer was incorrect. Provide a hint that will help the user get closer to the answer but does not directly reveal it.' }
my-app/src/components/Quiz_ai//Test/Review.js:    ];
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    try {
my-app/src/components/Quiz_ai//Test/Review.js:      const response = await fetch('https://api.openai.com/v1/chat/completions', {
my-app/src/components/Quiz_ai//Test/Review.js:        method: 'POST',
my-app/src/components/Quiz_ai//Test/Review.js:        headers: {
my-app/src/components/Quiz_ai//Test/Review.js:          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Review.js:          'Content-Type': 'application/json'
my-app/src/components/Quiz_ai//Test/Review.js:        },
my-app/src/components/Quiz_ai//Test/Review.js:        body: JSON.stringify({
my-app/src/components/Quiz_ai//Test/Review.js:          model: 'gpt-4o',
my-app/src/components/Quiz_ai//Test/Review.js:          messages: messages,
my-app/src/components/Quiz_ai//Test/Review.js:          max_tokens: 50
my-app/src/components/Quiz_ai//Test/Review.js:        })
my-app/src/components/Quiz_ai//Test/Review.js:      });
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Review.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:        throw new Error(`Error: ${response.status} ${response.statusText} - ${JSON.stringify(errorDetail)}`);
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:      if (data.choices && data.choices.length > 0) {
my-app/src/components/Quiz_ai//Test/Review.js:        setHint(data.choices[0].message.content.trim());
my-app/src/components/Quiz_ai//Test/Review.js:      } else {
my-app/src/components/Quiz_ai//Test/Review.js:        setHint('Error: No response from model');
my-app/src/components/Quiz_ai//Test/Review.js:      }
my-app/src/components/Quiz_ai//Test/Review.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Review.js:      setHint(`Error: ${error.message}`);
my-app/src/components/Quiz_ai//Test/Review.js:    } finally {
my-app/src/components/Quiz_ai//Test/Review.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Review.js:    }
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:  const handleRecordingProcess = async (audioBlob) => {
my-app/src/components/Quiz_ai//Test/Review.js:    await processRecording(audioBlob, (text) => 
my-app/src/components/Quiz_ai//Test/Review.js:      compareQuestion(
my-app/src/components/Quiz_ai//Test/Review.js:        text, 
my-app/src/components/Quiz_ai//Test/Review.js:        flashcards, 
my-app/src/components/Quiz_ai//Test/Review.js:        currentCardIndex, 
my-app/src/components/Quiz_ai//Test/Review.js:        typingMode, 
my-app/src/components/Quiz_ai//Test/Review.js:        typedAnswer, 
my-app/src/components/Quiz_ai//Test/Review.js:        setCorrectAnswers, 
my-app/src/components/Quiz_ai//Test/Review.js:        correctlyAnsweredQuestions, 
my-app/src/components/Quiz_ai//Test/Review.js:        setCorrectlyAnsweredQuestions, 
my-app/src/components/Quiz_ai//Test/Review.js:        setComparisonResult, 
my-app/src/components/Quiz_ai//Test/Review.js:        setWasCorrect, 
my-app/src/components/Quiz_ai//Test/Review.js:        setIsLoading
my-app/src/components/Quiz_ai//Test/Review.js:      )
my-app/src/components/Quiz_ai//Test/Review.js:    );
my-app/src/components/Quiz_ai//Test/Review.js:  };
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:    <div className="review-container">
my-app/src/components/Quiz_ai//Test/Review.js:      <div className="sidebar">
my-app/src/components/Quiz_ai//Test/Review.js:        <h3>{deckName}</h3>
my-app/src/components/Quiz_ai//Test/Review.js:        <button className="top-right-button" onClick={() => navigate(`/Deck/${deckName}`)}>
my-app/src/components/Quiz_ai//Test/Review.js:          Done
my-app/src/components/Quiz_ai//Test/Review.js:        </button>
my-app/src/components/Quiz_ai//Test/Review.js:        <ul className="card-list">
my-app/src/components/Quiz_ai//Test/Review.js:          {flashcards.map((flashcard, index) => (
my-app/src/components/Quiz_ai//Test/Review.js:            <li 
my-app/src/components/Quiz_ai//Test/Review.js:              key={index} 
my-app/src/components/Quiz_ai//Test/Review.js:              className={`card-item ${index === currentCardIndex ? 'active' : ''}`}
my-app/src/components/Quiz_ai//Test/Review.js:              onClick={() => handleCardClick(index)}
my-app/src/components/Quiz_ai//Test/Review.js:            >
my-app/src/components/Quiz_ai//Test/Review.js:              {flashcard.question}
my-app/src/components/Quiz_ai//Test/Review.js:            </li>
my-app/src/components/Quiz_ai//Test/Review.js:          ))}
my-app/src/components/Quiz_ai//Test/Review.js:        </ul>
my-app/src/components/Quiz_ai//Test/Review.js:      </div>
my-app/src/components/Quiz_ai//Test/Review.js:      <div className="main-content">
my-app/src/components/Quiz_ai//Test/Review.js:        {flashcards.length > 0 ? (
my-app/src/components/Quiz_ai//Test/Review.js:          <>
my-app/src/components/Quiz_ai//Test/Review.js:            <div className="flashcard">
my-app/src/components/Quiz_ai//Test/Review.js:              <p><strong>Q:</strong> {flashcards[currentCardIndex].question}</p>
my-app/src/components/Quiz_ai//Test/Review.js:              {showAnswer && (
my-app/src/components/Quiz_ai//Test/Review.js:                <p><strong>A:</strong> {flashcards[currentCardIndex].answer}</p>
my-app/src/components/Quiz_ai//Test/Review.js:              )}
my-app/src/components/Quiz_ai//Test/Review.js:              <div className="flashcard-buttons">
my-app/src/components/Quiz_ai//Test/Review.js:                <button onClick={() => setTypingMode(!typingMode)}>
my-app/src/components/Quiz_ai//Test/Review.js:                  {typingMode ? 'Voice Mode' : 'Type Mode'}
my-app/src/components/Quiz_ai//Test/Review.js:                </button>
my-app/src/components/Quiz_ai//Test/Review.js:                {!typingMode && !isRecording && !isLoading && comparisonResult !== 'Incorrect' && (
my-app/src/components/Quiz_ai//Test/Review.js:                  <button onClick={() => startRecording(setIsRecording, setMediaRecorder, handleRecordingProcess)}>Start</button>
my-app/src/components/Quiz_ai//Test/Review.js:                )}
my-app/src/components/Quiz_ai//Test/Review.js:                {typingMode && (
my-app/src/components/Quiz_ai//Test/Review.js:                  <>
my-app/src/components/Quiz_ai//Test/Review.js:                    <input
my-app/src/components/Quiz_ai//Test/Review.js:                      type="text"
my-app/src/components/Quiz_ai//Test/Review.js:                      value={typedAnswer}
my-app/src/components/Quiz_ai//Test/Review.js:                      onChange={(e) => setTypedAnswer(e.target.value)}
my-app/src/components/Quiz_ai//Test/Review.js:                      placeholder="Type your answer here"
my-app/src/components/Quiz_ai//Test/Review.js:                    />
my-app/src/components/Quiz_ai//Test/Review.js:                    <button
my-app/src/components/Quiz_ai//Test/Review.js:                      onClick={() => compareQuestion(typedAnswer, flashcards, currentCardIndex, typingMode, typedAnswer, setCorrectAnswers, correctlyAnsweredQuestions, setCorrectlyAnsweredQuestions, setComparisonResult, setWasCorrect, setIsLoading)}
my-app/src/components/Quiz_ai//Test/Review.js:                      disabled={!typedAnswer.trim()}
my-app/src/components/Quiz_ai//Test/Review.js:                    >
my-app/src/components/Quiz_ai//Test/Review.js:                      Send
my-app/src/components/Quiz_ai//Test/Review.js:                    </button>
my-app/src/components/Quiz_ai//Test/Review.js:                  </>
my-app/src/components/Quiz_ai//Test/Review.js:                )}
my-app/src/components/Quiz_ai//Test/Review.js:                {!typingMode && isRecording && (
my-app/src/components/Quiz_ai//Test/Review.js:                  <button onClick={() => finishRecording(mediaRecorder, setIsRecording, setIsLoading)}>Finish</button>
my-app/src/components/Quiz_ai//Test/Review.js:                )}
my-app/src/components/Quiz_ai//Test/Review.js:                {comparisonResult === 'Incorrect' && !isRecording && !isLoading && (
my-app/src/components/Quiz_ai//Test/Review.js:                  <button onClick={() => startRecording(setIsRecording, setMediaRecorder, handleRecordingProcess)}>Try Again</button>
my-app/src/components/Quiz_ai//Test/Review.js:                )}
my-app/src/components/Quiz_ai//Test/Review.js:                {comparisonResult === 'Incorrect' && (
my-app/src/components/Quiz_ai//Test/Review.js:                  <>
my-app/src/components/Quiz_ai//Test/Review.js:                    <button onClick={getHint}>Get Hint</button>
my-app/src/components/Quiz_ai//Test/Review.js:                    {hint && <p><strong>Hint:</strong> {hint}</p>}
my-app/src/components/Quiz_ai//Test/Review.js:                  </>
my-app/src/components/Quiz_ai//Test/Review.js:                )}
my-app/src/components/Quiz_ai//Test/Review.js:              </div>
my-app/src/components/Quiz_ai//Test/Review.js:              <div className="flashcard-secondary-buttons">
my-app/src/components/Quiz_ai//Test/Review.js:                <button onClick={handlePreviousCard} className="secondary-button">Back</button>
my-app/src/components/Quiz_ai//Test/Review.js:                <button onClick={handleNextCard} className="secondary-button">Next</button>
my-app/src/components/Quiz_ai//Test/Review.js:                <button onClick={handleShowAnswer} className="secondary-button">
my-app/src/components/Quiz_ai//Test/Review.js:                  {showAnswer ? 'Hide Answer' : 'Show Answer'}
my-app/src/components/Quiz_ai//Test/Review.js:                </button>
my-app/src/components/Quiz_ai//Test/Review.js:              </div>
my-app/src/components/Quiz_ai//Test/Review.js:            </div>
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:            {isLoading && <p>Loading...</p>}
my-app/src/components/Quiz_ai//Test/Review.js:            <div className="comparison-result">
my-app/src/components/Quiz_ai//Test/Review.js:              <p><strong>Result:</strong> {comparisonResult}</p>
my-app/src/components/Quiz_ai//Test/Review.js:            </div>
my-app/src/components/Quiz_ai//Test/Review.js:          </>
my-app/src/components/Quiz_ai//Test/Review.js:        ) : (
my-app/src/components/Quiz_ai//Test/Review.js:          <p>No flashcards available in this deck.</p>
my-app/src/components/Quiz_ai//Test/Review.js:        )}
my-app/src/components/Quiz_ai//Test/Review.js:      </div>
my-app/src/components/Quiz_ai//Test/Review.js:    </div>
my-app/src/components/Quiz_ai//Test/Review.js:  );
my-app/src/components/Quiz_ai//Test/Review.js:};
my-app/src/components/Quiz_ai//Test/Review.js:
my-app/src/components/Quiz_ai//Test/Review.js:export default Review;
my-app/src/components/Quiz_ai//Test/Test.js:import React, { useState, useEffect } from "react";
my-app/src/components/Quiz_ai//Test/Test.js:import { useParams, useNavigate } from "react-router-dom";
my-app/src/components/Quiz_ai//Test/Test.js:import "./Test.css";
my-app/src/components/Quiz_ai//Test/Test.js:import { setDoc, doc, getDoc } from "firebase/firestore";
my-app/src/components/Quiz_ai//Test/Test.js:import { db, auth } from "../../../firebase/firebase"; // Adjust the path as needed
my-app/src/components/Quiz_ai//Test/Test.js:import { onAuthStateChanged } from "firebase/auth";
my-app/src/components/Quiz_ai//Test/Test.js:import TestResults from "./TestResults"; // Import the new component
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:import { saveToFirestore, loadFromFirestore } from '../../../firebase/firebase';
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:const Test = () => {
my-app/src/components/Quiz_ai//Test/Test.js:  const { deckName } = useParams();
my-app/src/components/Quiz_ai//Test/Test.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//Test/Test.js:  const [flashcards, setFlashcards] = useState([]);
my-app/src/components/Quiz_ai//Test/Test.js:  const [currentCardIndex, setCurrentCardIndex] = useState(0);
my-app/src/components/Quiz_ai//Test/Test.js:  const [isRecording, setIsRecording] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [isLoading, setIsLoading] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [mediaRecorder, setMediaRecorder] = useState(null);
my-app/src/components/Quiz_ai//Test/Test.js:  const [showAnswer, setShowAnswer] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [hint, setHint] = useState("");
my-app/src/components/Quiz_ai//Test/Test.js:  const [hintUsed, setHintUsed] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [hintUsage, setHintUsage] = useState([]);
my-app/src/components/Quiz_ai//Test/Test.js:  const [skippedQuestions, setSkippedQuestions] = useState([]);
my-app/src/components/Quiz_ai//Test/Test.js:  const [typedAnswers, setTypedAnswers] = useState([]);
my-app/src/components/Quiz_ai//Test/Test.js:  const [results, setResults] = useState([]);
my-app/src/components/Quiz_ai//Test/Test.js:  const [finished, setFinished] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [user, setUser] = useState(null);
my-app/src/components/Quiz_ai//Test/Test.js:  const [showCardModal, setShowCardModal] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:  const [showHintModal, setShowHintModal] = useState(false);
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Test/Test.js:    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
my-app/src/components/Quiz_ai//Test/Test.js:      if (currentUser) {
my-app/src/components/Quiz_ai//Test/Test.js:        setUser(currentUser);
my-app/src/components/Quiz_ai//Test/Test.js:      } else {
my-app/src/components/Quiz_ai//Test/Test.js:        setUser(null);
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:    });
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  }, []);
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Test/Test.js:    const fetchFlashcards = async () => {
my-app/src/components/Quiz_ai//Test/Test.js:      const user = auth.currentUser;
my-app/src/components/Quiz_ai//Test/Test.js:      const storedFlashcards = await loadFromFirestore(
my-app/src/components/Quiz_ai//Test/Test.js:        `users/${user.uid}/decks/${deckName}`,
my-app/src/components/Quiz_ai//Test/Test.js:        []
my-app/src/components/Quiz_ai//Test/Test.js:      );
my-app/src/components/Quiz_ai//Test/Test.js:      setFlashcards(storedFlashcards.flashcards || []);
my-app/src/components/Quiz_ai//Test/Test.js:    };
my-app/src/components/Quiz_ai//Test/Test.js:    fetchFlashcards();
my-app/src/components/Quiz_ai//Test/Test.js:  }, [user, deckName]);
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const handleNextCard = () => {
my-app/src/components/Quiz_ai//Test/Test.js:    setCurrentCardIndex((prevIndex) =>
my-app/src/components/Quiz_ai//Test/Test.js:      prevIndex < flashcards.length - 1 ? prevIndex + 1 : prevIndex
my-app/src/components/Quiz_ai//Test/Test.js:    );
my-app/src/components/Quiz_ai//Test/Test.js:    setShowAnswer(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setHint("");
my-app/src/components/Quiz_ai//Test/Test.js:    setHintUsed(false);
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const handlePreviousCard = () => {
my-app/src/components/Quiz_ai//Test/Test.js:    setCurrentCardIndex((prevIndex) =>
my-app/src/components/Quiz_ai//Test/Test.js:      prevIndex > 0 ? prevIndex - 1 : prevIndex
my-app/src/components/Quiz_ai//Test/Test.js:    );
my-app/src/components/Quiz_ai//Test/Test.js:    setShowAnswer(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setHint("");
my-app/src/components/Quiz_ai//Test/Test.js:    setHintUsed(false);
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const handleShowAnswer = () => {
my-app/src/components/Quiz_ai//Test/Test.js:    if (!showAnswer) {
my-app/src/components/Quiz_ai//Test/Test.js:      setShowAnswer(true);
my-app/src/components/Quiz_ai//Test/Test.js:      setSkippedQuestions((prev) => [...prev, currentCardIndex]);
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const getHint = async () => {
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Test.js:    setHint("");
my-app/src/components/Quiz_ai//Test/Test.js:    const originalQuestion = flashcards[currentCardIndex].question;
my-app/src/components/Quiz_ai//Test/Test.js:    const originalAnswer = flashcards[currentCardIndex].answer;
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    const messages = [
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "system", content: "You are a helpful assistant." },
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "user", content: `Original Question: ${originalQuestion}` },
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "user", content: `Original Answer: ${originalAnswer}` },
my-app/src/components/Quiz_ai//Test/Test.js:      {
my-app/src/components/Quiz_ai//Test/Test.js:        role: "user",
my-app/src/components/Quiz_ai//Test/Test.js:        content:
my-app/src/components/Quiz_ai//Test/Test.js:          "Provide a hint that will help the user get closer to the answer but does not directly reveal it.",
my-app/src/components/Quiz_ai//Test/Test.js:      },
my-app/src/components/Quiz_ai//Test/Test.js:    ];
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    try {
my-app/src/components/Quiz_ai//Test/Test.js:      const response = await fetch(
my-app/src/components/Quiz_ai//Test/Test.js:        "https://api.openai.com/v1/chat/completions",
my-app/src/components/Quiz_ai//Test/Test.js:        {
my-app/src/components/Quiz_ai//Test/Test.js:          method: "POST",
my-app/src/components/Quiz_ai//Test/Test.js:          headers: {
my-app/src/components/Quiz_ai//Test/Test.js:            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Test.js:            "Content-Type": "application/json",
my-app/src/components/Quiz_ai//Test/Test.js:          },
my-app/src/components/Quiz_ai//Test/Test.js:          body: JSON.stringify({
my-app/src/components/Quiz_ai//Test/Test.js:            model: "gpt-4",
my-app/src/components/Quiz_ai//Test/Test.js:            messages: messages,
my-app/src/components/Quiz_ai//Test/Test.js:            max_tokens: 50,
my-app/src/components/Quiz_ai//Test/Test.js:          }),
my-app/src/components/Quiz_ai//Test/Test.js:        }
my-app/src/components/Quiz_ai//Test/Test.js:      );
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Test.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:        throw new Error(
my-app/src/components/Quiz_ai//Test/Test.js:          `Error: ${response.status} ${response.statusText} - ${JSON.stringify(
my-app/src/components/Quiz_ai//Test/Test.js:            errorDetail
my-app/src/components/Quiz_ai//Test/Test.js:          )}`
my-app/src/components/Quiz_ai//Test/Test.js:        );
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      if (data.choices && data.choices.length > 0) {
my-app/src/components/Quiz_ai//Test/Test.js:        const newHint = data.choices[0].message.content.trim();
my-app/src/components/Quiz_ai//Test/Test.js:        setHint(newHint);
my-app/src/components/Quiz_ai//Test/Test.js:        setHintUsed(true);
my-app/src/components/Quiz_ai//Test/Test.js:        const newHintUsage = [...hintUsage];
my-app/src/components/Quiz_ai//Test/Test.js:        newHintUsage[currentCardIndex] = true;
my-app/src/components/Quiz_ai//Test/Test.js:        setHintUsage(newHintUsage);
my-app/src/components/Quiz_ai//Test/Test.js:      } else {
my-app/src/components/Quiz_ai//Test/Test.js:        setHint("Error: No response from model");
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Test.js:      setHint(`Error: ${error.message}`);
my-app/src/components/Quiz_ai//Test/Test.js:    } finally {
my-app/src/components/Quiz_ai//Test/Test.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const startRecording = async () => {
my-app/src/components/Quiz_ai//Test/Test.js:    setIsRecording(true);
my-app/src/components/Quiz_ai//Test/Test.js:    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
my-app/src/components/Quiz_ai//Test/Test.js:    const recorder = new MediaRecorder(stream);
my-app/src/components/Quiz_ai//Test/Test.js:    setMediaRecorder(recorder);
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    recorder.ondataavailable = (event) => {
my-app/src/components/Quiz_ai//Test/Test.js:      const audioBlob = event.data;
my-app/src/components/Quiz_ai//Test/Test.js:      processRecording(audioBlob);
my-app/src/components/Quiz_ai//Test/Test.js:    };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    recorder.start();
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const finishRecording = () => {
my-app/src/components/Quiz_ai//Test/Test.js:    if (mediaRecorder) {
my-app/src/components/Quiz_ai//Test/Test.js:      mediaRecorder.onstop = () => {
my-app/src/components/Quiz_ai//Test/Test.js:        const tracks = mediaRecorder.stream.getTracks();
my-app/src/components/Quiz_ai//Test/Test.js:        tracks.forEach((track) => track.stop());
my-app/src/components/Quiz_ai//Test/Test.js:        setIsRecording(false);
my-app/src/components/Quiz_ai//Test/Test.js:        setMediaRecorder(null);
my-app/src/components/Quiz_ai//Test/Test.js:        setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Test.js:      };
my-app/src/components/Quiz_ai//Test/Test.js:      mediaRecorder.stop();
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const processRecording = async (audioBlob) => {
my-app/src/components/Quiz_ai//Test/Test.js:    const formData = new FormData();
my-app/src/components/Quiz_ai//Test/Test.js:    formData.append("model", "whisper-1");
my-app/src/components/Quiz_ai//Test/Test.js:    formData.append(
my-app/src/components/Quiz_ai//Test/Test.js:      "file",
my-app/src/components/Quiz_ai//Test/Test.js:      new Blob([audioBlob], { type: "audio/mp3" }),
my-app/src/components/Quiz_ai//Test/Test.js:      "audio/mp3"
my-app/src/components/Quiz_ai//Test/Test.js:    );
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    try {
my-app/src/components/Quiz_ai//Test/Test.js:      const response = await fetch(
my-app/src/components/Quiz_ai//Test/Test.js:        "https://api.openai.com/v1/audio/transcriptions",
my-app/src/components/Quiz_ai//Test/Test.js:        {
my-app/src/components/Quiz_ai//Test/Test.js:          method: "POST",
my-app/src/components/Quiz_ai//Test/Test.js:          headers: {
my-app/src/components/Quiz_ai//Test/Test.js:            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Test.js:          },
my-app/src/components/Quiz_ai//Test/Test.js:          body: formData,
my-app/src/components/Quiz_ai//Test/Test.js:        }
my-app/src/components/Quiz_ai//Test/Test.js:      );
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Test.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:        throw new Error(
my-app/src/components/Quiz_ai//Test/Test.js:          `Error: ${response.status} ${response.statusText} - ${JSON.stringify(
my-app/src/components/Quiz_ai//Test/Test.js:            errorDetail
my-app/src/components/Quiz_ai//Test/Test.js:          )}`
my-app/src/components/Quiz_ai//Test/Test.js:        );
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      const newTypedAnswers = [...typedAnswers];
my-app/src/components/Quiz_ai//Test/Test.js:      newTypedAnswers[currentCardIndex] = data.text;
my-app/src/components/Quiz_ai//Test/Test.js:      setTypedAnswers(newTypedAnswers);
my-app/src/components/Quiz_ai//Test/Test.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Test.js:      console.error("Error processing recording: ", error);
my-app/src/components/Quiz_ai//Test/Test.js:    } finally {
my-app/src/components/Quiz_ai//Test/Test.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const compareAnswer = async (question, correctAnswer, userAnswer) => {
my-app/src/components/Quiz_ai//Test/Test.js:    const messages = [
my-app/src/components/Quiz_ai//Test/Test.js:      {
my-app/src/components/Quiz_ai//Test/Test.js:        role: "system",
my-app/src/components/Quiz_ai//Test/Test.js:        content:
my-app/src/components/Quiz_ai//Test/Test.js:          'You are a helpful assistant. You will be provided with an original question, its correct answer, and a user-provided answer. Your task is to determine if the user-provided answer is correct. Answer strictly with "yes" or "no".',
my-app/src/components/Quiz_ai//Test/Test.js:      },
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "user", content: `Original Question: ${question}` },
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "user", content: `Original Answer: ${correctAnswer}` },
my-app/src/components/Quiz_ai//Test/Test.js:      { role: "user", content: `User Answer: ${userAnswer}` },
my-app/src/components/Quiz_ai//Test/Test.js:      {
my-app/src/components/Quiz_ai//Test/Test.js:        role: "user",
my-app/src/components/Quiz_ai//Test/Test.js:        content:
my-app/src/components/Quiz_ai//Test/Test.js:          'Does the user-provided answer correctly answer the original question? Answer strictly "yes" or "no".',
my-app/src/components/Quiz_ai//Test/Test.js:      },
my-app/src/components/Quiz_ai//Test/Test.js:    ];
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    try {
my-app/src/components/Quiz_ai//Test/Test.js:      const response = await fetch(
my-app/src/components/Quiz_ai//Test/Test.js:        "https://api.openai.com/v1/chat/completions",
my-app/src/components/Quiz_ai//Test/Test.js:        {
my-app/src/components/Quiz_ai//Test/Test.js:          method: "POST",
my-app/src/components/Quiz_ai//Test/Test.js:          headers: {
my-app/src/components/Quiz_ai//Test/Test.js:            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//Test/Test.js:            "Content-Type": "application/json",
my-app/src/components/Quiz_ai//Test/Test.js:          },
my-app/src/components/Quiz_ai//Test/Test.js:          body: JSON.stringify({
my-app/src/components/Quiz_ai//Test/Test.js:            model: "gpt-4",
my-app/src/components/Quiz_ai//Test/Test.js:            messages: messages,
my-app/src/components/Quiz_ai//Test/Test.js:            max_tokens: 10,
my-app/src/components/Quiz_ai//Test/Test.js:          }),
my-app/src/components/Quiz_ai//Test/Test.js:        }
my-app/src/components/Quiz_ai//Test/Test.js:      );
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//Test/Test.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:        throw new Error(
my-app/src/components/Quiz_ai//Test/Test.js:          `Error: ${response.status} ${response.statusText} - ${JSON.stringify(
my-app/src/components/Quiz_ai//Test/Test.js:            errorDetail
my-app/src/components/Quiz_ai//Test/Test.js:          )}`
my-app/src/components/Quiz_ai//Test/Test.js:        );
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      const data = await response.json();
my-app/src/components/Quiz_ai//Test/Test.js:      const choice = data.choices[0];
my-app/src/components/Quiz_ai//Test/Test.js:      const result = choice.message.content
my-app/src/components/Quiz_ai//Test/Test.js:        .trim()
my-app/src/components/Quiz_ai//Test/Test.js:        .replace(".", "")
my-app/src/components/Quiz_ai//Test/Test.js:        .toLowerCase();
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    } catch (error) {
my-app/src/components/Quiz_ai//Test/Test.js:      console.error("Error fetching data: ", error);
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const handleFinish = async () => {
my-app/src/components/Quiz_ai//Test/Test.js:    setIsLoading(true);
my-app/src/components/Quiz_ai//Test/Test.js:    const newResults = [];
my-app/src/components/Quiz_ai//Test/Test.js:    for (let i = 0; i < flashcards.length; i++) {
my-app/src/components/Quiz_ai//Test/Test.js:      const userAnswer = typedAnswers[i] || "";
my-app/src/components/Quiz_ai//Test/Test.js:      const correctAnswer = flashcards[i].answer;
my-app/src/components/Quiz_ai//Test/Test.js:      const question = flashcards[i].question;
my-app/src/components/Quiz_ai//Test/Test.js:      const hintUsedForQuestion = hintUsage[i] || false;
my-app/src/components/Quiz_ai//Test/Test.js:      let result = { correct: false, score: 0 };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      if (skippedQuestions.includes(i) || showAnswer) {
my-app/src/components/Quiz_ai//Test/Test.js:        result.skipped = true;
my-app/src/components/Quiz_ai//Test/Test.js:        result.correct = false;
my-app/src/components/Quiz_ai//Test/Test.js:        result.score = 0;
my-app/src/components/Quiz_ai//Test/Test.js:      } else {
my-app/src/components/Quiz_ai//Test/Test.js:        result = await compareAnswer(question, correctAnswer, userAnswer);
my-app/src/components/Quiz_ai//Test/Test.js:        if (result.correct) {
my-app/src/components/Quiz_ai//Test/Test.js:          result.score = hintUsedForQuestion ? 0.5 : 1;
my-app/src/components/Quiz_ai//Test/Test.js:        } else {
my-app/src/components/Quiz_ai//Test/Test.js:          result.score = 0;
my-app/src/components/Quiz_ai//Test/Test.js:        }
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      newResults.push({
my-app/src/components/Quiz_ai//Test/Test.js:        questionIndex: i,
my-app/src/components/Quiz_ai//Test/Test.js:        correct: result.correct,
my-app/src/components/Quiz_ai//Test/Test.js:        userAnswer,
my-app/src/components/Quiz_ai//Test/Test.js:        correctAnswer,
my-app/src/components/Quiz_ai//Test/Test.js:        hintUsed: hintUsedForQuestion,
my-app/src/components/Quiz_ai//Test/Test.js:        skipped: result.skipped || false,
my-app/src/components/Quiz_ai//Test/Test.js:      });
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Test.js:    const score =
my-app/src/components/Quiz_ai//Test/Test.js:      (newResults.filter((r) => r.correct).length / flashcards.length) * 100;
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    if (user) {
my-app/src/components/Quiz_ai//Test/Test.js:      const scoreEntry = {
my-app/src/components/Quiz_ai//Test/Test.js:        date: new Date().toISOString(),
my-app/src/components/Quiz_ai//Test/Test.js:        score: score,
my-app/src/components/Quiz_ai//Test/Test.js:        testResult: {
my-app/src/components/Quiz_ai//Test/Test.js:          results: newResults,
my-app/src/components/Quiz_ai//Test/Test.js:          flashcards,
my-app/src/components/Quiz_ai//Test/Test.js:          deckName,
my-app/src/components/Quiz_ai//Test/Test.js:        },
my-app/src/components/Quiz_ai//Test/Test.js:      };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:      // **Corrected Code Starts Here**
my-app/src/components/Quiz_ai//Test/Test.js:      try {
my-app/src/components/Quiz_ai//Test/Test.js:        // Step 1: Load existing scores
my-app/src/components/Quiz_ai//Test/Test.js:        const currentScoresData = await loadFromFirestore(
my-app/src/components/Quiz_ai//Test/Test.js:          `users/${user.uid}/settings/scores`,
my-app/src/components/Quiz_ai//Test/Test.js:          {}
my-app/src/components/Quiz_ai//Test/Test.js:        );
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:        // Step 2: Access the scores for the specific deck, or initialize as empty array
my-app/src/components/Quiz_ai//Test/Test.js:        const deckScores = currentScoresData[deckName] || [];
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:        // Step 3: Append the new scoreEntry
my-app/src/components/Quiz_ai//Test/Test.js:        const updatedDeckScores = [...deckScores, scoreEntry];
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:        // Step 4: Save the updated scores back to Firestore
my-app/src/components/Quiz_ai//Test/Test.js:        await saveToFirestore(`users/${user.uid}/settings/scores`, {
my-app/src/components/Quiz_ai//Test/Test.js:          ...currentScoresData, // Preserve scores for other decks
my-app/src/components/Quiz_ai//Test/Test.js:          [deckName]: updatedDeckScores, // Update scores for the current deck
my-app/src/components/Quiz_ai//Test/Test.js:        });
my-app/src/components/Quiz_ai//Test/Test.js:      } catch (error) {
my-app/src/components/Quiz_ai//Test/Test.js:        console.error("Error saving score to Firestore:", error);
my-app/src/components/Quiz_ai//Test/Test.js:        // Optionally, handle the error (e.g., show a notification to the user)
my-app/src/components/Quiz_ai//Test/Test.js:      }
my-app/src/components/Quiz_ai//Test/Test.js:      // **Corrected Code Ends Here**
my-app/src/components/Quiz_ai//Test/Test.js:    }
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    navigate("/testresults", {
my-app/src/components/Quiz_ai//Test/Test.js:      state: { results: newResults, flashcards, deckName },
my-app/src/components/Quiz_ai//Test/Test.js:    });
my-app/src/components/Quiz_ai//Test/Test.js:    
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:  const retakeTest = () => {
my-app/src/components/Quiz_ai//Test/Test.js:    setCurrentCardIndex(0);
my-app/src/components/Quiz_ai//Test/Test.js:    setIsRecording(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setIsLoading(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setShowAnswer(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setHint("");
my-app/src/components/Quiz_ai//Test/Test.js:    setHintUsed(false);
my-app/src/components/Quiz_ai//Test/Test.js:    setHintUsage([]);
my-app/src/components/Quiz_ai//Test/Test.js:    setSkippedQuestions([]);
my-app/src/components/Quiz_ai//Test/Test.js:    setTypedAnswers([]);
my-app/src/components/Quiz_ai//Test/Test.js:    setResults([]);
my-app/src/components/Quiz_ai//Test/Test.js:    setFinished(false);
my-app/src/components/Quiz_ai//Test/Test.js:  };
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:    <div className="test-component">
my-app/src/components/Quiz_ai//Test/Test.js:      <div className="test-container">
my-app/src/components/Quiz_ai//Test/Test.js:        {showCardModal && (
my-app/src/components/Quiz_ai//Test/Test.js:          <div className="modal">
my-app/src/components/Quiz_ai//Test/Test.js:            <div className="modal-content">
my-app/src/components/Quiz_ai//Test/Test.js:              {flashcards.map((_, index) => (
my-app/src/components/Quiz_ai//Test/Test.js:                <button
my-app/src/components/Quiz_ai//Test/Test.js:                  key={index}
my-app/src/components/Quiz_ai//Test/Test.js:                  className={`nav-button ${
my-app/src/components/Quiz_ai//Test/Test.js:                    index === currentCardIndex ? "active" : ""
my-app/src/components/Quiz_ai//Test/Test.js:                  }`}
my-app/src/components/Quiz_ai//Test/Test.js:                  onClick={() => {
my-app/src/components/Quiz_ai//Test/Test.js:                    setCurrentCardIndex(index);
my-app/src/components/Quiz_ai//Test/Test.js:                    setShowCardModal(false);
my-app/src/components/Quiz_ai//Test/Test.js:                  }}
my-app/src/components/Quiz_ai//Test/Test.js:                >
my-app/src/components/Quiz_ai//Test/Test.js:                  {index + 1}
my-app/src/components/Quiz_ai//Test/Test.js:                </button>
my-app/src/components/Quiz_ai//Test/Test.js:              ))}
my-app/src/components/Quiz_ai//Test/Test.js:              <button
my-app/src/components/Quiz_ai//Test/Test.js:                className="btn btn-danger"
my-app/src/components/Quiz_ai//Test/Test.js:                onClick={() => setShowCardModal(false)}
my-app/src/components/Quiz_ai//Test/Test.js:              >
my-app/src/components/Quiz_ai//Test/Test.js:                Close
my-app/src/components/Quiz_ai//Test/Test.js:              </button>
my-app/src/components/Quiz_ai//Test/Test.js:            </div>
my-app/src/components/Quiz_ai//Test/Test.js:          </div>
my-app/src/components/Quiz_ai//Test/Test.js:        )}
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:        {isLoading ? (
my-app/src/components/Quiz_ai//Test/Test.js:          <p>Loading...</p>
my-app/src/components/Quiz_ai//Test/Test.js:        ) : finished ? (
my-app/src/components/Quiz_ai//Test/Test.js:          <TestResults
my-app/src/components/Quiz_ai//Test/Test.js:            results={results}
my-app/src/components/Quiz_ai//Test/Test.js:            flashcards={flashcards}
my-app/src/components/Quiz_ai//Test/Test.js:            onRetake={retakeTest}
my-app/src/components/Quiz_ai//Test/Test.js:            deckName={deckName}
my-app/src/components/Quiz_ai//Test/Test.js:          />
my-app/src/components/Quiz_ai//Test/Test.js:        ) : (
my-app/src/components/Quiz_ai//Test/Test.js:          <>
my-app/src/components/Quiz_ai//Test/Test.js:            <div className="question-status-row">
my-app/src/components/Quiz_ai//Test/Test.js:              <p className="question-status">
my-app/src/components/Quiz_ai//Test/Test.js:                <strong>Question {currentCardIndex + 1}:</strong>
my-app/src/components/Quiz_ai//Test/Test.js:              </p>
my-app/src/components/Quiz_ai//Test/Test.js:              <button
my-app/src/components/Quiz_ai//Test/Test.js:                onClick={() => setShowCardModal(true)}
my-app/src/components/Quiz_ai//Test/Test.js:                className="circular-button"
my-app/src/components/Quiz_ai//Test/Test.js:              >
my-app/src/components/Quiz_ai//Test/Test.js:                <i className="fas fa-ellipsis-h"></i>
my-app/src/components/Quiz_ai//Test/Test.js:              </button>
my-app/src/components/Quiz_ai//Test/Test.js:            </div>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:            <button
my-app/src/components/Quiz_ai//Test/Test.js:              className="st-back-button"
my-app/src/components/Quiz_ai//Test/Test.js:              onClick={() => navigate(`/deck/${deckName}/flashcard-input`)}
my-app/src/components/Quiz_ai//Test/Test.js:            >
my-app/src/components/Quiz_ai//Test/Test.js:              <i className="fas fa-arrow-left"></i>
my-app/src/components/Quiz_ai//Test/Test.js:            </button>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:            <div className="flashcard">
my-app/src/components/Quiz_ai//Test/Test.js:              <p>
my-app/src/components/Quiz_ai//Test/Test.js:                <strong>Q:</strong> {flashcards[currentCardIndex]?.question}
my-app/src/components/Quiz_ai//Test/Test.js:              </p>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:              {showHintModal && (
my-app/src/components/Quiz_ai//Test/Test.js:                <div className="modal">
my-app/src/components/Quiz_ai//Test/Test.js:                  <div className="modal-content">
my-app/src/components/Quiz_ai//Test/Test.js:                    <p className="hint">
my-app/src/components/Quiz_ai//Test/Test.js:                      <strong>Hint:</strong> {hint}
my-app/src/components/Quiz_ai//Test/Test.js:                    </p>
my-app/src/components/Quiz_ai//Test/Test.js:                    <button
my-app/src/components/Quiz_ai//Test/Test.js:                      className="btn btn-danger"
my-app/src/components/Quiz_ai//Test/Test.js:                      onClick={() => setShowHintModal(false)}
my-app/src/components/Quiz_ai//Test/Test.js:                    >
my-app/src/components/Quiz_ai//Test/Test.js:                      Close
my-app/src/components/Quiz_ai//Test/Test.js:                    </button>
my-app/src/components/Quiz_ai//Test/Test.js:                  </div>
my-app/src/components/Quiz_ai//Test/Test.js:                </div>
my-app/src/components/Quiz_ai//Test/Test.js:              )}
my-app/src/components/Quiz_ai//Test/Test.js:            </div>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:            <div className="answer-container">
my-app/src/components/Quiz_ai//Test/Test.js:              <div className="flashcard-answer-input">
my-app/src/components/Quiz_ai//Test/Test.js:                <input
my-app/src/components/Quiz_ai//Test/Test.js:                  type="text"
my-app/src/components/Quiz_ai//Test/Test.js:                  value={typedAnswers[currentCardIndex] || ""}
my-app/src/components/Quiz_ai//Test/Test.js:                  onChange={(e) => {
my-app/src/components/Quiz_ai//Test/Test.js:                    const newTypedAnswers = [...typedAnswers];
my-app/src/components/Quiz_ai//Test/Test.js:                    newTypedAnswers[currentCardIndex] = e.target.value;
my-app/src/components/Quiz_ai//Test/Test.js:                    setTypedAnswers(newTypedAnswers);
my-app/src/components/Quiz_ai//Test/Test.js:                  }}
my-app/src/components/Quiz_ai//Test/Test.js:                  placeholder="Type your answer here"
my-app/src/components/Quiz_ai//Test/Test.js:                />
my-app/src/components/Quiz_ai//Test/Test.js:              </div>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:              <div className="button-stack small-buttons">
my-app/src/components/Quiz_ai//Test/Test.js:                <button
my-app/src/components/Quiz_ai//Test/Test.js:                  className="btn btn-secondary"
my-app/src/components/Quiz_ai//Test/Test.js:                  onClick={() => {
my-app/src/components/Quiz_ai//Test/Test.js:                    if (!hint) getHint();
my-app/src/components/Quiz_ai//Test/Test.js:                    setShowHintModal(true);
my-app/src/components/Quiz_ai//Test/Test.js:                  }}
my-app/src/components/Quiz_ai//Test/Test.js:                >
my-app/src/components/Quiz_ai//Test/Test.js:                  <i className="fas fa-question"></i>
my-app/src/components/Quiz_ai//Test/Test.js:                </button>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:                <button
my-app/src/components/Quiz_ai//Test/Test.js:                  className={`btn ${
my-app/src/components/Quiz_ai//Test/Test.js:                    isRecording ? "btn-danger" : "btn-primary"
my-app/src/components/Quiz_ai//Test/Test.js:                  }`}
my-app/src/components/Quiz_ai//Test/Test.js:                  onClick={() => {
my-app/src/components/Quiz_ai//Test/Test.js:                    if (!isRecording) {
my-app/src/components/Quiz_ai//Test/Test.js:                      startRecording();
my-app/src/components/Quiz_ai//Test/Test.js:                    } else {
my-app/src/components/Quiz_ai//Test/Test.js:                      finishRecording();
my-app/src/components/Quiz_ai//Test/Test.js:                    }
my-app/src/components/Quiz_ai//Test/Test.js:                  }}
my-app/src/components/Quiz_ai//Test/Test.js:                >
my-app/src/components/Quiz_ai//Test/Test.js:                  {isRecording ? (
my-app/src/components/Quiz_ai//Test/Test.js:                    <i className="fas fa-stop"></i>
my-app/src/components/Quiz_ai//Test/Test.js:                  ) : (
my-app/src/components/Quiz_ai//Test/Test.js:                    <i className="fas fa-microphone"></i>
my-app/src/components/Quiz_ai//Test/Test.js:                  )}
my-app/src/components/Quiz_ai//Test/Test.js:                </button>
my-app/src/components/Quiz_ai//Test/Test.js:              </div>
my-app/src/components/Quiz_ai//Test/Test.js:            </div>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:            <div className="navigation-buttons">
my-app/src/components/Quiz_ai//Test/Test.js:              <button
my-app/src/components/Quiz_ai//Test/Test.js:                className="circular-button"
my-app/src/components/Quiz_ai//Test/Test.js:                onClick={handlePreviousCard}
my-app/src/components/Quiz_ai//Test/Test.js:                disabled={currentCardIndex === 0}
my-app/src/components/Quiz_ai//Test/Test.js:              >
my-app/src/components/Quiz_ai//Test/Test.js:                <i className="fas fa-arrow-left"></i>
my-app/src/components/Quiz_ai//Test/Test.js:              </button>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:              <button
my-app/src/components/Quiz_ai//Test/Test.js:                className="btn btn-warning"
my-app/src/components/Quiz_ai//Test/Test.js:                onClick={handleShowAnswer}
my-app/src/components/Quiz_ai//Test/Test.js:                disabled={showAnswer}
my-app/src/components/Quiz_ai//Test/Test.js:              >
my-app/src/components/Quiz_ai//Test/Test.js:                Show Answer
my-app/src/components/Quiz_ai//Test/Test.js:              </button>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:              {currentCardIndex === flashcards.length - 1 ? (
my-app/src/components/Quiz_ai//Test/Test.js:                <button className="circular-button" onClick={handleFinish}>
my-app/src/components/Quiz_ai//Test/Test.js:                  <i className="fas fa-check"></i>
my-app/src/components/Quiz_ai//Test/Test.js:                </button>
my-app/src/components/Quiz_ai//Test/Test.js:              ) : (
my-app/src/components/Quiz_ai//Test/Test.js:                <button className="circular-button" onClick={handleNextCard}>
my-app/src/components/Quiz_ai//Test/Test.js:                  <i className="fas fa-arrow-right"></i>
my-app/src/components/Quiz_ai//Test/Test.js:                </button>
my-app/src/components/Quiz_ai//Test/Test.js:              )}
my-app/src/components/Quiz_ai//Test/Test.js:            </div>
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:            {showAnswer && (
my-app/src/components/Quiz_ai//Test/Test.js:              <div className="answer-display">
my-app/src/components/Quiz_ai//Test/Test.js:                <p>
my-app/src/components/Quiz_ai//Test/Test.js:                  <strong>Answer:</strong>{" "}
my-app/src/components/Quiz_ai//Test/Test.js:                  {flashcards[currentCardIndex]?.answer}
my-app/src/components/Quiz_ai//Test/Test.js:                </p>
my-app/src/components/Quiz_ai//Test/Test.js:              </div>
my-app/src/components/Quiz_ai//Test/Test.js:            )}
my-app/src/components/Quiz_ai//Test/Test.js:          </>
my-app/src/components/Quiz_ai//Test/Test.js:        )}
my-app/src/components/Quiz_ai//Test/Test.js:      </div>
my-app/src/components/Quiz_ai//Test/Test.js:    </div>
my-app/src/components/Quiz_ai//Test/Test.js:  );
my-app/src/components/Quiz_ai//Test/Test.js:};
my-app/src/components/Quiz_ai//Test/Test.js:
my-app/src/components/Quiz_ai//Test/Test.js:export default Test;
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import React, { useState, useEffect } from 'react';
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import { useNavigate, useParams } from 'react-router-dom';
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import { setDoc, doc, getDoc } from 'firebase/firestore';
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import { db, auth } from '../../../firebase/firebase'; // Ensure this path is correct
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import { onAuthStateChanged } from 'firebase/auth';
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:import './QuizMaker.css';
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:const QuizMaker = () => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [inputText, setInputText] = useState('');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [isLoading, setIsLoading] = useState(false);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [suggestions, setSuggestions] = useState([]);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [customSuggestions, setCustomSuggestions] = useState([]);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [customInput, setCustomInput] = useState('');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [selectedSuggestions, setSelectedSuggestions] = useState(new Set());
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [confirmed, setConfirmed] = useState(false);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const [user, setUser] = useState(null);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const { deckName } = useParams();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  useEffect(() => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (currentUser) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        setUser(currentUser);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        console.log('User signed in:', currentUser);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      } else {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        setUser(null);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        console.log('User signed out');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  }, []);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const handleGenerate = async () => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!user) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('You need to be signed in to generate questions.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const deckDocRef = doc(db, `users/${user.uid}/decks`, deckName);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const deckDoc = await getDoc(deckDocRef);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (deckDoc.exists() && deckDoc.data().generated) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('You have already generated questions for this deck.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const saveGeneratedQuestions = async (generatedQuestions) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const limitedQuestions = generatedQuestions.slice(0, 10);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const flashcards = limitedQuestions.map(q => ({ question: q.question, answer: q.answer }));
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      try {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        await setDoc(deckDocRef, {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          flashcards: flashcards,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          generated: true,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        }, { merge: true });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        alert('Questions generated and saved successfully.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      } catch (error) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        console.error('Error saving generated questions:', error);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        alert('Failed to save generated questions.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:// with backend ^^^^
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!inputText.trim()) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('Please enter some text.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!confirmed) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('Please confirm your suggestions first.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const userConfirmed = window.confirm('This action can only be performed once per deck and you will not be able to generate new questions again for this deck. Do you want to proceed?');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!userConfirmed) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setIsLoading(true);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    // Combine AI-generated and custom suggestions
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const allSuggestions = [
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      ...suggestions.filter(suggestion => selectedSuggestions.has(suggestion.id)),
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      ...customSuggestions.filter(suggestion => selectedSuggestions.has(suggestion.id))
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    ];
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const finalPrompt = allSuggestions.map(suggestion => suggestion.text).join(' ');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const messages = [
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      { role: 'system', content: 'You are a helpful assistant.' },
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      { 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        role: 'user', 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        content: `Given this text: "${inputText}". This information will be used to create a quiz. Generate a series of questions and answers from the provided text. Format: Q: Question A: Answer. MAXIMUM OF 10 QUESTIONS ONLY.` 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      },
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      { 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        role: 'user', 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        content: `Include these suggestions: ${finalPrompt} Format: Q: Question A: Answer. MAXIMUM OF 10 QUESTIONS ONLY` 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    ];
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    console.log('Messages:', messages); // Log the messages array
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    try {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const response = await fetch('https://api.openai.com/v1/chat/completions', {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        method: 'POST',
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        headers: {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          'Content-Type': 'application/json'
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        },
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        body: JSON.stringify({
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          model: 'gpt-4o-mini',
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          messages: messages,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          max_tokens: 1500
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        })
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        throw new Error(`Error: ${response.status} ${response.statusText} - ${JSON.stringify(errorDetail)}`);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const data = await response.json();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (data.choices && data.choices.length > 0) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const text = data.choices[0].message.content.trim();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const qaPairs = text.split('\n').reduce((acc, line) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          if (line.startsWith('Q: ')) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            acc.push({ question: line.slice(3).trim(), answer: '' });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          } else if (line.startsWith('A: ') && acc.length) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            acc[acc.length - 1].answer = line.slice(3).trim();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        }, []);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        saveGeneratedQuestions(qaPairs);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        navigate(`/deck/${deckName}`);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      } else {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        alert('Failed to generate questions. Please try again.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    } catch (error) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      console.error('Error generating questions:', error);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('Error generating questions. Please try again.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    } finally {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const handleConfirm = async () => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!inputText.trim()) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('Please enter some text.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setIsLoading(true);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    // Split the input text into sentences
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const sentences = inputText.split('.').map(sentence => sentence.trim()).filter(sentence => sentence);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    // Randomize sentences and always include the first two to three sentences
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const shuffledSentences = sentences.sort(() => 0.5 - Math.random());
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const randomSentences = shuffledSentences.slice(0, 4);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    // Combine first two sentences with random sentences
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const selectedSentences = [
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      sentences[0], 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      sentences[1], 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      ...(sentences[2] ? [sentences[2]] : []),
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      ...randomSentences
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    ].slice(0, 4);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const prompt = selectedSentences.join(' ');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const messages = [
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      { role: 'system', content: 'You are a helpful assistant.' },
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      { 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        role: 'user', 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        content: `Here is some text: "${prompt}". This information will be used to create a quiz. Provide four detailed and varied suggestions on how to create quiz questions based on this content. 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        Each suggestion should focus on a different aspect of the content, such as functions, processes, implications, comparisons, or definitions. 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        Ensure that each suggestion is clear, specific, and comprehensive, helping to formulate insightful quiz questions. 
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        You are not supposed to provide questions or any other information, only the four suggestions.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        Examples of suggestions:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        1. Focus on key functions.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        2. Highlight major processes.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        3. Discuss implications.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        4. Compare different elements.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        5. Define and explain key terms.
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        The output should be formatted as follows:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        1. [Suggestion 1]
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        2. [Suggestion 2]
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        3. [Suggestion 3]
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        4. [Suggestion 4]`
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    ];
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    try {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const response = await fetch('https://api.openai.com/v1/chat/completions', {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        method: 'POST',
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        headers: {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          'Content-Type': 'application/json'
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        },
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        body: JSON.stringify({
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          model: 'gpt-3.5-turbo',
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          messages: messages,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          max_tokens: 150
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        })
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (!response.ok) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const errorDetail = await response.json();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        throw new Error(`Error: ${response.status} ${response.statusText} - ${JSON.stringify(errorDetail)}`);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const data = await response.json();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (data.choices && data.choices.length > 0) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const suggestionsText = data.choices[0].message.content.trim();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const suggestionPattern = /\d\.\s*(.*?)(?=\n|$)/g;
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        let match;
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        const generatedSuggestions = [];
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        let index = 0;
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        while ((match = suggestionPattern.exec(suggestionsText)) !== null) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          generatedSuggestions.push({
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            id: index,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            text: match[1].trim()
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          index++;
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        // Log each suggestion individually for debugging
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        generatedSuggestions.forEach((suggestion, idx) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        setSuggestions(generatedSuggestions);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        setConfirmed(true);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      } else {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        alert('Failed to generate suggestions. Please try again.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    } catch (error) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      console.error('Error generating suggestions:', error);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      alert('Error generating suggestions. Please try again.');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    } finally {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      setIsLoading(false);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const toggleSuggestion = (id) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setSelectedSuggestions(prev => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const newSelected = new Set(prev);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      if (newSelected.has(id)) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        newSelected.delete(id);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      } else {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        newSelected.add(id);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const addCustomSuggestion = () => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    if (!customInput.trim()) {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    }
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    const newSuggestion = {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      id: suggestions.length + customSuggestions.length,
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      text: customInput.trim()
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setCustomSuggestions([...customSuggestions, newSuggestion]);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    console.log('Custom suggestions:', [...customSuggestions, newSuggestion]); // Add this log
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setCustomInput('');
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  const removeCustomSuggestion = (id) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setCustomSuggestions(customSuggestions.filter(suggestion => suggestion.id !== id));
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    setSelectedSuggestions(prev => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      const newSelected = new Set(prev);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      newSelected.delete(id);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    });
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    <div className="quizmaker-container">
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      <h2>QuizMaker</h2>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      <textarea
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        rows="10"
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        cols="50"
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        value={inputText}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        onChange={(e) => setInputText(e.target.value)}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        placeholder="Enter the large body of text here..."
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        disabled={confirmed}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      ></textarea>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      <div>{inputText.length}/1000 characters</div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      {!confirmed && (
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        <button onClick={handleConfirm}>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          Confirm
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        </button>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      )}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      {confirmed && (
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        <>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          <div className="suggestions-container">
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            {suggestions.map(suggestion => (
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              <div
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                key={suggestion.id}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                className={`suggestion-box ${selectedSuggestions.has(suggestion.id) ? 'selected' : ''}`}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                onClick={() => toggleSuggestion(suggestion.id)}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              >
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                {suggestion.text}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              </div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            ))}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            {customSuggestions.map(suggestion => (
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              <div
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                key={suggestion.id}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                className={`suggestion-box ${selectedSuggestions.has(suggestion.id) ? 'selected' : ''}`}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                onClick={() => toggleSuggestion(suggestion.id)}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              >
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                {suggestion.text}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                <button onClick={(e) => {
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                  e.stopPropagation();
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                  removeCustomSuggestion(suggestion.id);
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:                }}>X</button>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              </div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            ))}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          </div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          <div className="custom-suggestions">
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            <input
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              type="text"
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              value={customInput}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              onChange={(e) => setCustomInput(e.target.value)}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:              placeholder="Add your own suggestion"
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            />
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:            <button onClick={addCustomSuggestion}>+</button>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          </div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        </>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      )}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      {confirmed && (
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        <button onClick={handleGenerate} disabled={isLoading}>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:          {isLoading ? 'Generating...' : 'Generate Questions'}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:        </button>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:      )}
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:    </div>
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  );
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:  };
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:
my-app/src/components/Quiz_ai//QuizMaker/QuizMaker.js:export default QuizMaker;
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:// src/components/Quiz_ai/ScoreReport.js
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import React, { useState, useEffect } from "react";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import { useParams, useNavigate } from "react-router-dom";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import { auth, db } from "../../../firebase/firebase";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import "./ScoreReport.css";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import { doc, getDoc, updateDoc } from "firebase/firestore";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import TestResults from "../Test/TestResults";
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:import { loadFromFirestore, deleteScoreFromFirestore } from '../../../firebase/firebase';
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:const AttemptCard = ({ scoreEntry, index, onDelete }) => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const [isExpanded, setIsExpanded] = useState(false);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const [testResults, setTestResults] = useState(null);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  useEffect(() => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    setTestResults(scoreEntry.testResult); // The saved test result is passed here
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  }, [scoreEntry]);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    <div className={`attempt-card ${isExpanded ? "expanded" : ""}`}>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      <div
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        className="attempt-summary"
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        onClick={() => setIsExpanded(!isExpanded)}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      >
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <div className="summary-left">
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          <p>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            <strong>Score:</strong> {scoreEntry.score.toFixed(2)}%
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          </p>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          <p>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            <strong>Date:</strong> {new Date(scoreEntry.date).toLocaleString()}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          </p>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <div className="summary-right">{isExpanded ? "▲" : "▼"}</div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      {isExpanded && testResults && (
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <div className="attempt-details">
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          <TestResults
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            results={testResults.results}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            flashcards={testResults.flashcards}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            deckName={testResults.deckName}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            onRetake={() => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              // Optional: Implement retake functionality if needed
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              // For example, navigate to the test page with the deckName
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            }}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          />
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      )}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      <button className="delete-button" onClick={() => onDelete(index)}>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        Delete
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      </button>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  );
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:};
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:const ScoreReport = () => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const { deckName } = useParams();
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const [scores, setScores] = useState([]);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  useEffect(() => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    const fetchScores = async () => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      const user = auth.currentUser;
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      if (user) {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        const storedScores = await loadFromFirestore(
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          `users/${user.uid}/settings/scores`,
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          {}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        );
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        if (storedScores[deckName]) {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          setScores(storedScores[deckName]);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        }
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      }
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    };
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    fetchScores();
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  }, [deckName]);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  const handleDelete = async (index) => {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    const user = auth.currentUser;
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    if (user) {
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      await deleteScoreFromFirestore(user.uid, deckName, index);
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      setScores((prevScores) => prevScores.filter((_, i) => i !== index));
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    }
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  };
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    <div className="score-report">
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      <button
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        className="st-back-button"
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        onClick={() => navigate(`/deck/${deckName}/flashcard-input`)}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      >
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <i className="fas fa-arrow-left"></i>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      </button>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      <h2>Score Report for "{deckName}"</h2>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      {scores.length === 0 ? (
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <p>No scores available for this deck.</p>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      ) : (
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        <div className="attempts-list">
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          {scores.map((scoreEntry, index) => (
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            <AttemptCard
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              key={index}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              scoreEntry={scoreEntry}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              index={index}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:              onDelete={handleDelete}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:            />
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:          ))}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:        </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:      )}
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:    </div>
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:  );
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:};
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:
my-app/src/components/Quiz_ai//ScoreReport/ScoreReport.js:export default ScoreReport;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import React, { useState, useEffect } from "react";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import { useParams, Link, useNavigate } from "react-router-dom";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import { setDoc, doc, getDoc, updateDoc } from "firebase/firestore";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import { db, auth } from "../../../firebase/firebase"; // Adjust the path as needed
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import { onAuthStateChanged } from "firebase/auth";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import "./FlashcardInput.css";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:import { saveToFirestore, loadFromFirestore, removeFromFirestore } from '../../../firebase/firebase';
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:const saveDeckFlashcards = async (userId, deckName, flashcards) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const deckData = { flashcards };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  await saveToFirestore(`users/${userId}/decks/${deckName}`, deckData);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:};
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:const removeDeckFlashcards = async (userId, deckName) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  await removeFromFirestore(`users/${userId}/decks/${deckName}`);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:};
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:function FlashcardInput() {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const { deckName, setDeckName } = useParams();
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [user, setUser] = useState(null);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [flashcards, setFlashcards] = useState([]);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [editIndex, setEditIndex] = useState(null);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [newDeckName, setNewDeckName] = useState(deckName);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [isEditingDeck, setIsEditingDeck] = useState(false);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [totalFlashcardsCreated, setTotalFlashcardsCreated] = useState(0);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [showDisclaimer, setShowDisclaimer] = useState(false);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [description, setDescription] = useState("");
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const [newDeckDescription, setNewDeckDescription] = useState("");
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const MAX_FLASHCARDS = 10;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  useEffect(() => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      if (currentUser) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        setUser(currentUser);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        fetchTotalFlashcardsCreated(currentUser.uid, deckName);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      } else {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        setUser(null);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        setTotalFlashcardsCreated(0);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  }, [deckName]);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const fetchTotalFlashcardsCreated = async (userId, deckName) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const deckDocRef = doc(db, "users", userId, "decks", deckName);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const deckDoc = await getDoc(deckDocRef);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (deckDoc.exists()) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setTotalFlashcardsCreated(deckDoc.data().totalFlashcardsCreated || 0);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    } else {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      await setDoc(deckDocRef, { totalFlashcardsCreated: 0 }, { merge: true });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  useEffect(() => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const fetchFlashcards = async () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      if (user) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        const docPath = `users/${user.uid}/decks/${deckName}`;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        const deckData = await loadFromFirestore(docPath, {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          flashcards: [],
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          description: "",
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        const flashcards = deckData.flashcards || [];
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        const description = deckData.description || "No description available";
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        setFlashcards(flashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        setDescription(description); // Assuming you have a state for description
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (user) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      fetchFlashcards();
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  }, [deckName, user]);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleTestYourself = async () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    await saveToFirestore("settings", `${deckName}-shuffled`, {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      shuffled: flashcards,
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    await saveToFirestore("settings", `${deckName}-currentIndex`, {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      currentIndex: 0,
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    navigate(`/test/${deckName}`);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleSave = () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (user && editIndex === null) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setShowDisclaimer(true);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    } else if (user && editIndex !== null) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      handleConfirmSave();
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleEdit = (index) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    setEditIndex(index);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleDelete = (index) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      user &&
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      window.confirm(
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        "Are you sure you want to delete this flashcard? This action cannot be undone."
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      )
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    ) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      const newFlashcards = flashcards.filter((_, i) => i !== index);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setFlashcards(newFlashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      saveDeckFlashcards(user.uid, deckName, newFlashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleDeleteDeck = async () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      window.confirm(
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        "Are you sure you want to delete this deck? This action cannot be undone."
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      ) &&
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      user
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    ) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      await removeDeckFlashcards(user.uid, deckName);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      navigate("/");
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleAddFlashcard = () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (totalFlashcardsCreated >= MAX_FLASHCARDS) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      alert(
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        `You have already created ${totalFlashcardsCreated} flashcards in this deck. You cannot create more.`
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      );
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const newFlashcards = [...flashcards, { question: "", answer: "" }];
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    setFlashcards(newFlashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    setEditIndex(newFlashcards.length - 1);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    setShowDisclaimer(true);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleConfirmSave = async () => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (user) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      await saveDeckFlashcards(user.uid, deckName, flashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setEditIndex(null);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      // Update total flashcards created for this deck
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      const deckDocRef = doc(db, "users", user.uid, "decks", deckName);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      const newTotal = flashcards.length;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      await updateDoc(deckDocRef, { totalFlashcardsCreated: newTotal });
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setTotalFlashcardsCreated(newTotal);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setIsEditingDeck(false);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      setShowDisclaimer(false);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  const handleInputChange = (index, field, value) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    const newFlashcards = [...flashcards];
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    if (field === "question") {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      newFlashcards[index].question = value;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    } else if (field === "answer") {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      newFlashcards[index].answer = value;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    } else if (field === "description") {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      newFlashcards[index].description = value;
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    setFlashcards(newFlashcards);
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  };
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    <div class="screen-border-container">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      <button className="st-back-button" onClick={() => navigate("/deck/home")}>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <i className="fas fa-arrow-left"></i>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      <div className="flashcard-input-container">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <div className="flashcard-input-title-bar">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <div className="title-description-container">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            {isEditingDeck ? (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              <>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <input
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  type="text"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  value={newDeckName}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  onChange={(e) => setNewDeckName(e.target.value)}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  className="flashcard-input-deck-name"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                />
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <textarea
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  value={newDeckDescription}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  onChange={(e) => setNewDeckDescription(e.target.value)}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  className="flashcard-input-deck-description"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  placeholder="Edit the description"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                />
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              </>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            ) : (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              <>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <h3 className="flashcard-input-title">{newDeckName}</h3>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <p className="deck-card-description">{description}</p>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              </>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            )}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <div className="title-bar-buttons">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            {isEditingDeck && (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                onClick={handleDeleteDeck}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                className="edit-icon-button"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                style={{ color: "red" }}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <i className="fas fa-trash"></i>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            )}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              onClick={() => setIsEditingDeck(!isEditingDeck)}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              className={`edit-icon-button ${isEditingDeck ? "enabled" : ""}`}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              <i className={`fas ${isEditingDeck ? "fa-check" : "fa-pen"}`}></i>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <div className="flashcard-button-row">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <Link to={`/test/${deckName}`}>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              onClick={handleTestYourself}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              className="flashcard-button flashcard-button-secondary"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              Test
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </Link>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <Link to={`/review/${deckName}`}>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <button className="flashcard-button flashcard-button-secondary">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              Review
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </Link>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <Link to={`/score-report/${deckName}`}>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <button className="flashcard-button flashcard-button-secondary">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              View Scores
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </Link>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          <Link
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            to={`/quizmaker/${deckName}`}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            onClick={(e) => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              if (localStorage.getItem(`${deckName}-generated`) === "true") {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                e.preventDefault(); // Prevent navigation
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                alert(
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  "You have already used the QuizMaker feature for this deck."
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                );
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            }}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <button className="flashcard-button flashcard-button-secondary">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              QuizMaker
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          </Link>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <hr className="lowkey-divider" />
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          className="flashcard-input-add-button"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          onClick={() => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            if (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              window.confirm(
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                "You are about to add a new flashcard. This action cannot be undone. Do you wish to proceed?"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              )
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            ) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              handleAddFlashcard();
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          }}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          + Add Flashcard
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        <div className="flashcard-input-list">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          {flashcards.map((flashcard, index) => (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            <div key={index} className="flashcard-input-item">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              <div className="flashcard-input-content">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <div className="flashcard-input-question">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  <label>Question</label>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  {editIndex === index ? (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      <input
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        type="text"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        value={flashcard.question}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        onChange={(e) =>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                          handleInputChange(index, "question", e.target.value)
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        className="flashcard-input-question-input"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      />
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      {/* <input
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              type="text"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              placeholder="Add a short description"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              value={flashcard.description || ""}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              onChange={(e) =>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                handleInputChange(index, "description", e.target.value)
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              className="flashcard-input-description-input"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            /> */}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    </>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  ) : (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      <p className="flashcard-input-question-text">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        {flashcard.question}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      </p>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      <p className="flashcard-input-description-text">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        {flashcard.description}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      </p>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    </>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  )}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <div className="flashcard-input-vertical-line"></div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <div className="flashcard-input-answer">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  <label>Answer</label>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  {editIndex === index ? (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <input
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      type="text"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      value={flashcard.answer}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      onChange={(e) =>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        handleInputChange(index, "answer", e.target.value)
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      className="flashcard-input-answer-input"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    />
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  ) : (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <p className="flashcard-input-answer-text">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      {flashcard.answer}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    </p>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  )}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                <div className="flashcard-input-buttons">
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    onClick={() => {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      if (editIndex === index) {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        handleSave(); // Save the changes
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      } else {
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        handleEdit(index); // Enter edit mode
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      }
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    }}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    className={`edit-icon-button ${
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      editIndex === index ? "enabled" : ""
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    }`}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <i
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      className={`fas ${
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                        editIndex === index ? "fa-check" : "fa-pen"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      }`}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    ></i>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  {editIndex === index && (
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    <button
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      onClick={() => handleDelete(index)}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      className="edit-icon-button"
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    >
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                      <i className="fas fa-trash"></i>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                    </button>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                  )}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:                </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:              </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:            </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:          ))}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:        </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:      </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:    </div>
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:  );
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:}
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:
my-app/src/components/Quiz_ai//FlashcardInput/FlashcardInput.js:export default FlashcardInput;
my-app/src/components/Quiz_ai//Deck/Deck.js:import React, { useState, useEffect } from "react";
my-app/src/components/Quiz_ai//Deck/Deck.js:import { Link } from "react-router-dom";
my-app/src/components/Quiz_ai//Deck/Deck.js:import { useNavigate } from "react-router-dom";
my-app/src/components/Quiz_ai//Deck/Deck.js:import {
my-app/src/components/Quiz_ai//Deck/Deck.js:  collection,
my-app/src/components/Quiz_ai//Deck/Deck.js:  getDocs,
my-app/src/components/Quiz_ai//Deck/Deck.js:  setDoc,
my-app/src/components/Quiz_ai//Deck/Deck.js:  doc,
my-app/src/components/Quiz_ai//Deck/Deck.js:  getDoc,
my-app/src/components/Quiz_ai//Deck/Deck.js:  updateDoc,
my-app/src/components/Quiz_ai//Deck/Deck.js:} from "firebase/firestore";
my-app/src/components/Quiz_ai//Deck/Deck.js:import { db, auth } from "../../../firebase/firebase";
my-app/src/components/Quiz_ai//Deck/Deck.js:import { onAuthStateChanged } from "firebase/auth";
my-app/src/components/Quiz_ai//Deck/Deck.js:import "./Deck.css";
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:function Deck() {
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [decks, setDecks] = useState({});
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [user, setUser] = useState(null);
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [totalCardsCreated, setTotalCardsCreated] = useState(0);
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [showDisclaimer, setShowDisclaimer] = useState(false);
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [newDeckName, setNewDeckName] = useState("");
my-app/src/components/Quiz_ai//Deck/Deck.js:  const navigate = useNavigate();
my-app/src/components/Quiz_ai//Deck/Deck.js:  const [newDeckDescription, setNewDeckDescription] = useState("");
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  const MAX_CARDS = 25;
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
my-app/src/components/Quiz_ai//Deck/Deck.js:      if (currentUser) {
my-app/src/components/Quiz_ai//Deck/Deck.js:        setUser(currentUser);
my-app/src/components/Quiz_ai//Deck/Deck.js:        fetchTotalCardsCreated(currentUser.uid);
my-app/src/components/Quiz_ai//Deck/Deck.js:      } else {
my-app/src/components/Quiz_ai//Deck/Deck.js:        setUser(null);
my-app/src/components/Quiz_ai//Deck/Deck.js:        setTotalCardsCreated(0);
my-app/src/components/Quiz_ai//Deck/Deck.js:      }
my-app/src/components/Quiz_ai//Deck/Deck.js:    });
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  }, []);
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  const fetchTotalCardsCreated = async (userId) => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    const userDocRef = doc(db, "users", userId);
my-app/src/components/Quiz_ai//Deck/Deck.js:    const userDoc = await getDoc(userDocRef);
my-app/src/components/Quiz_ai//Deck/Deck.js:    if (userDoc.exists()) {
my-app/src/components/Quiz_ai//Deck/Deck.js:      setTotalCardsCreated(userDoc.data().totalCardsCreated || 0);
my-app/src/components/Quiz_ai//Deck/Deck.js:    } else {
my-app/src/components/Quiz_ai//Deck/Deck.js:      await setDoc(userDocRef, { totalCardsCreated: 0 });
my-app/src/components/Quiz_ai//Deck/Deck.js:    }
my-app/src/components/Quiz_ai//Deck/Deck.js:  };
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  useEffect(() => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    const fetchDecks = async () => {
my-app/src/components/Quiz_ai//Deck/Deck.js:      if (user) {
my-app/src/components/Quiz_ai//Deck/Deck.js:        console.log("Fetching decks for user:", user.uid);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksCollectionRef = collection(db, `users/${user.uid}/decks`);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksSnapshot = await getDocs(decksCollectionRef);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksData = {};
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        decksSnapshot.forEach((deckDoc) => {
my-app/src/components/Quiz_ai//Deck/Deck.js:          const data = deckDoc.data();
my-app/src/components/Quiz_ai//Deck/Deck.js:          console.log("Data cards:", data.cards); // Add this line for debugging
my-app/src/components/Quiz_ai//Deck/Deck.js:          const numCards = Array.isArray(data.flashcards) ? data.flashcards.length : 0;
my-app/src/components/Quiz_ai//Deck/Deck.js:          console.log("Number of cards in deck", deckDoc.id, ":", numCards);
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:          const description = data.description || "No description";
my-app/src/components/Quiz_ai//Deck/Deck.js:          decksData[deckDoc.id] = { numCards, description };
my-app/src/components/Quiz_ai//Deck/Deck.js:        });
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        console.log("All decks data:", decksData);
my-app/src/components/Quiz_ai//Deck/Deck.js:        setDecks(decksData);
my-app/src/components/Quiz_ai//Deck/Deck.js:      }
my-app/src/components/Quiz_ai//Deck/Deck.js:    };
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:    fetchDecks();
my-app/src/components/Quiz_ai//Deck/Deck.js:  }, [user]);
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  const saveDeck = async (deckName, deckDescription) => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    if (!decks[deckName] && user) {
my-app/src/components/Quiz_ai//Deck/Deck.js:      const newDecks = {
my-app/src/components/Quiz_ai//Deck/Deck.js:        ...decks,
my-app/src/components/Quiz_ai//Deck/Deck.js:        [deckName]: { numCards: 0, description: deckDescription },
my-app/src/components/Quiz_ai//Deck/Deck.js:      };
my-app/src/components/Quiz_ai//Deck/Deck.js:      setDecks(newDecks);
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:      try {
my-app/src/components/Quiz_ai//Deck/Deck.js:        await setDoc(doc(db, `users/${user.uid}/decks`, deckName), {
my-app/src/components/Quiz_ai//Deck/Deck.js:          cards: [],
my-app/src/components/Quiz_ai//Deck/Deck.js:          description: deckDescription,
my-app/src/components/Quiz_ai//Deck/Deck.js:        });
my-app/src/components/Quiz_ai//Deck/Deck.js:        console.log(
my-app/src/components/Quiz_ai//Deck/Deck.js:          "Deck saved with name:",
my-app/src/components/Quiz_ai//Deck/Deck.js:          deckName,
my-app/src/components/Quiz_ai//Deck/Deck.js:          "and description:",
my-app/src/components/Quiz_ai//Deck/Deck.js:          deckDescription
my-app/src/components/Quiz_ai//Deck/Deck.js:        );
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        const userDocRef = doc(db, "users", user.uid);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const newTotal = totalCardsCreated + 1;
my-app/src/components/Quiz_ai//Deck/Deck.js:        await updateDoc(userDocRef, { totalCardsCreated: newTotal });
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        setTotalCardsCreated(newTotal);
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksCollectionRef = collection(db, `users/${user.uid}/decks`);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksSnapshot = await getDocs(decksCollectionRef);
my-app/src/components/Quiz_ai//Deck/Deck.js:        const decksData = {};
my-app/src/components/Quiz_ai//Deck/Deck.js:  
my-app/src/components/Quiz_ai//Deck/Deck.js:        decksSnapshot.forEach((doc) => {
my-app/src/components/Quiz_ai//Deck/Deck.js:          const data = doc.data();
my-app/src/components/Quiz_ai//Deck/Deck.js:          const numCards = Array.isArray(data.cards) ? data.cards.length : 0;
my-app/src/components/Quiz_ai//Deck/Deck.js:          const description = data.description || "No description";
my-app/src/components/Quiz_ai//Deck/Deck.js:          decksData[doc.id] = { numCards, description };
my-app/src/components/Quiz_ai//Deck/Deck.js:        });
my-app/src/components/Quiz_ai//Deck/Deck.js:        setDecks(decksData);
my-app/src/components/Quiz_ai//Deck/Deck.js:      } catch (error) {
my-app/src/components/Quiz_ai//Deck/Deck.js:      }
my-app/src/components/Quiz_ai//Deck/Deck.js:    } else {
my-app/src/components/Quiz_ai//Deck/Deck.js:    }
my-app/src/components/Quiz_ai//Deck/Deck.js:  };
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  const handleCreateNewDeck = () => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    if (totalCardsCreated >= MAX_CARDS) {
my-app/src/components/Quiz_ai//Deck/Deck.js:      alert(
my-app/src/components/Quiz_ai//Deck/Deck.js:        `You have already created ${totalCardsCreated} cards. You cannot create more.`
my-app/src/components/Quiz_ai//Deck/Deck.js:      );
my-app/src/components/Quiz_ai//Deck/Deck.js:    }
my-app/src/components/Quiz_ai//Deck/Deck.js:    setShowDisclaimer(true);
my-app/src/components/Quiz_ai//Deck/Deck.js:  };
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:  const handleConfirmNewDeck = async () => {
my-app/src/components/Quiz_ai//Deck/Deck.js:    if (newDeckName && user) {
my-app/src/components/Quiz_ai//Deck/Deck.js:      await saveDeck(newDeckName, newDeckDescription);
my-app/src/components/Quiz_ai//Deck/Deck.js:      setShowDisclaimer(false);
my-app/src/components/Quiz_ai//Deck/Deck.js:      setNewDeckName("");
my-app/src/components/Quiz_ai//Deck/Deck.js:      setNewDeckDescription(""); // Clear the description after saving
my-app/src/components/Quiz_ai//Deck/Deck.js:    }
my-app/src/components/Quiz_ai//Deck/Deck.js:  };
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:    <div>
my-app/src/components/Quiz_ai//Deck/Deck.js:      <div className="st-squircle-banner">Convert images and audio to text</div>
my-app/src/components/Quiz_ai//Deck/Deck.js:      <button className="st-back-button" onClick={() => navigate("/")}>
my-app/src/components/Quiz_ai//Deck/Deck.js:        <i className="fas fa-arrow-left"></i>
my-app/src/components/Quiz_ai//Deck/Deck.js:      </button>
my-app/src/components/Quiz_ai//Deck/Deck.js:      <div className="deck-main-container">
my-app/src/components/Quiz_ai//Deck/Deck.js:        <div className="deck-app-container">
my-app/src/components/Quiz_ai//Deck/Deck.js:          <header className="deck-app-header"></header>
my-app/src/components/Quiz_ai//Deck/Deck.js:          <main className="deck-main-content">
my-app/src/components/Quiz_ai//Deck/Deck.js:            <section className="deck-recent-decks">
my-app/src/components/Quiz_ai//Deck/Deck.js:              <ul className="deck-grid">
my-app/src/components/Quiz_ai//Deck/Deck.js:                {Object.entries(decks).map(
my-app/src/components/Quiz_ai//Deck/Deck.js:                  ([deckName, { numCards, description }]) => (
my-app/src/components/Quiz_ai//Deck/Deck.js:                    <li key={deckName} className="deck-card">
my-app/src/components/Quiz_ai//Deck/Deck.js:                      <Link
my-app/src/components/Quiz_ai//Deck/Deck.js:                        to={`/deck/${deckName}/flashcard-input`}
my-app/src/components/Quiz_ai//Deck/Deck.js:                        className="deck-card-link"
my-app/src/components/Quiz_ai//Deck/Deck.js:                      >
my-app/src/components/Quiz_ai//Deck/Deck.js:                        <h3 className="deck-card-title">{deckName}</h3>
my-app/src/components/Quiz_ai//Deck/Deck.js:                        <p className="deck-card-description-view">{description}</p>
my-app/src/components/Quiz_ai//Deck/Deck.js:                        <hr className="deck-card-divider" />
my-app/src/components/Quiz_ai//Deck/Deck.js:                        <p className="deck-card-count">{numCards} cards</p>
my-app/src/components/Quiz_ai//Deck/Deck.js:                      </Link>
my-app/src/components/Quiz_ai//Deck/Deck.js:                    </li>
my-app/src/components/Quiz_ai//Deck/Deck.js:                  )
my-app/src/components/Quiz_ai//Deck/Deck.js:                )}
my-app/src/components/Quiz_ai//Deck/Deck.js:                <li
my-app/src/components/Quiz_ai//Deck/Deck.js:                  className="deck-card deck-add-card"
my-app/src/components/Quiz_ai//Deck/Deck.js:                  onClick={handleCreateNewDeck}
my-app/src/components/Quiz_ai//Deck/Deck.js:                >
my-app/src/components/Quiz_ai//Deck/Deck.js:                  <div className="deck-add-icon">+</div>
my-app/src/components/Quiz_ai//Deck/Deck.js:                  <span className="deck-add-text">Create New Deck</span>
my-app/src/components/Quiz_ai//Deck/Deck.js:                </li>
my-app/src/components/Quiz_ai//Deck/Deck.js:              </ul>
my-app/src/components/Quiz_ai//Deck/Deck.js:            </section>
my-app/src/components/Quiz_ai//Deck/Deck.js:          </main>
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:          {showDisclaimer && (
my-app/src/components/Quiz_ai//Deck/Deck.js:            <div className="deck-modal-overlay">
my-app/src/components/Quiz_ai//Deck/Deck.js:              <div className="deck-modal-content">
my-app/src/components/Quiz_ai//Deck/Deck.js:                <h3>Create New Deck</h3>
my-app/src/components/Quiz_ai//Deck/Deck.js:                <p>
my-app/src/components/Quiz_ai//Deck/Deck.js:                  You have created {totalCardsCreated} out of {MAX_CARDS}{" "}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  maximum allowed cards. This action cannot be undone. Are you
my-app/src/components/Quiz_ai//Deck/Deck.js:                  sure you want to continue?
my-app/src/components/Quiz_ai//Deck/Deck.js:                </p>
my-app/src/components/Quiz_ai//Deck/Deck.js:                <p className="deck-modal-description">
my-app/src/components/Quiz_ai//Deck/Deck.js:                  Please enter a unique name and a brief description for your
my-app/src/components/Quiz_ai//Deck/Deck.js:                  new deck. This will help you organize your flashcards better.
my-app/src/components/Quiz_ai//Deck/Deck.js:                </p>
my-app/src/components/Quiz_ai//Deck/Deck.js:                <input
my-app/src/components/Quiz_ai//Deck/Deck.js:                  type="text"
my-app/src/components/Quiz_ai//Deck/Deck.js:                  placeholder="Enter deck name"
my-app/src/components/Quiz_ai//Deck/Deck.js:                  value={newDeckName}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  onChange={(e) => setNewDeckName(e.target.value)}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  className="deck-input"
my-app/src/components/Quiz_ai//Deck/Deck.js:                />
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:                <input
my-app/src/components/Quiz_ai//Deck/Deck.js:                  type="text"
my-app/src/components/Quiz_ai//Deck/Deck.js:                  placeholder="Enter deck description"
my-app/src/components/Quiz_ai//Deck/Deck.js:                  value={newDeckDescription}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  onChange={(e) => setNewDeckDescription(e.target.value)}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  className="deck-input"
my-app/src/components/Quiz_ai//Deck/Deck.js:                />
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:                <div className="deck-modal-actions">
my-app/src/components/Quiz_ai//Deck/Deck.js:                  <button
my-app/src/components/Quiz_ai//Deck/Deck.js:                    className="deck-confirm-button"
my-app/src/components/Quiz_ai//Deck/Deck.js:                    onClick={handleConfirmNewDeck}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  >
my-app/src/components/Quiz_ai//Deck/Deck.js:                    Create Deck
my-app/src/components/Quiz_ai//Deck/Deck.js:                  </button>
my-app/src/components/Quiz_ai//Deck/Deck.js:                  <button
my-app/src/components/Quiz_ai//Deck/Deck.js:                    className="deck-cancel-button"
my-app/src/components/Quiz_ai//Deck/Deck.js:                    onClick={() => setShowDisclaimer(false)}
my-app/src/components/Quiz_ai//Deck/Deck.js:                  >
my-app/src/components/Quiz_ai//Deck/Deck.js:                    Cancel
my-app/src/components/Quiz_ai//Deck/Deck.js:                  </button>
my-app/src/components/Quiz_ai//Deck/Deck.js:                </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:              </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:            </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:          )}
my-app/src/components/Quiz_ai//Deck/Deck.js:        </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:      </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:    </div>
my-app/src/components/Quiz_ai//Deck/Deck.js:  );
my-app/src/components/Quiz_ai//Deck/Deck.js:}
my-app/src/components/Quiz_ai//Deck/Deck.js:
my-app/src/components/Quiz_ai//Deck/Deck.js:export default Deck;
